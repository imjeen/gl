{"version":3,"sources":["containers/Home/index.tsx","services/hooks/canvas.ts","containers/Demo/HelloWorld/index.tsx","utils/gl.ts","containers/Demo/Point/index.tsx","containers/Demo/Line/index.tsx","containers/Demo/Triangle/Pure.tsx","containers/Demo/Triangle/Gradient.tsx","containers/Demo/Triangle/Multiple.tsx","containers/Demo/Triangle/index.tsx","utils/index.ts","containers/Demo/Texture/Image.tsx","services/hooks/image.ts","containers/Demo/Texture/index.tsx","containers/Demo/Coordinate/Triangle.tsx","utils/matrix.ts","containers/Demo/Coordinate/Matrix.tsx","containers/Demo/Coordinate/index.tsx","containers/Demo/Matrix/Translation.tsx","containers/Demo/Matrix/Rotation.tsx","containers/Demo/Matrix/Scale.tsx","containers/Demo/Matrix/Matrix.tsx","containers/Demo/Matrix/Matrix3D.tsx","containers/Demo/Matrix/index.tsx","containers/Demo/Cube/index.tsx","containers/Demo/Animation/index.tsx","containers/Demo/index.tsx","containers/Draw/index.tsx","services/hooks/draw.ts","App.tsx","reportWebVitals.ts","index.tsx","containers/Demo/styles.module.less","containers/Demo/HelloWorld/styles.module.less"],"names":["Home","path","useRouteMatch","exact","to","useCanvas","drawCallback","context","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","HelloWorld","refCanvas","gl","clearColor","clear","COLOR_BUFFER_BIT","ref","width","height","className","styles","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","initWebGL","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","Point","render","useProgram","a_position","getAttribLocation","vertexAttrib3f","drawArrays","POINTS","TriangleBase","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","enableVertexAttribArray","LINES","TRIANGLES","TriangleColor","points","a_color","render1","colors","colorBuffer","render2","MultipleTriangle","draw","Triangle","loadImage","urlOrBase64OrFile","a","crossOrigin","getFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","Error","onerror","err","readAsDataURL","src","image","Image","ImageTexture","url","useState","setImage","useImage","texCoords","texCoordBuffer","a_texCoord","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","Texture","u_resolution","getUniformLocation","uniform2f","drawByCanvasCoordinate","colorUniformLocation","uniform4f","drawColorTriangle","drawGradientColorTriangle","m3","tx","ty","angle","c","Math","cos","s","sin","sx","sy","b","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","m4","depth","tz","sz","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","MatrixCoordinate","translation","scale","translationMatrix","rotationMatrix","scaleMatrix","projectionMatrix","matrix","u_matrix","uniformMatrix3fv","Translation","u_color","drawNormalF","uniform4fv","random","u_translation","uniform2fv","drawTranslateF","Rotation","rotation","u_rotation","drawRotationF","Scaling","u_scale","drawScalingF","i","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","Uint8Array","degToRad","d","PI","rotationXMatrix","rotationYMatrix","rotationZMatrix","uniformMatrix4fv","set3DModel","setColor","options","then","rafId","now","deltaTime","drawMatrix","requestAnimationFrame","cancelAnimationFrame","ROUTES","name","route","component","Demo","pathname","useLocation","history","useHistory","open","state","setState","findRoute","find","topTitle","onOpenChange","sidebar","map","index","Item","multipleLine","onClick","push","onRoute","navBar","mode","icon","onLeftClick","rightContent","window","location","reload","drawer","style","minHeight","document","documentElement","clientHeight","enableDragHandle","WIDTH","innerWidth","HEIGHT","innerHeight","Draw","strokeStyle","lineWidth","gridSize","drawGrid","useCallback","clearRect","beginPath","setLineDash","countX","moveTo","lineTo","stroke","countY","useGrid","lineJoin","isPainting","setIsPainting","mousePosition","setMousePosition","getCoordinates","event","changedTouches","clientX","clientY","x","offsetLeft","y","offsetTop","drawLine","from","closePath","handleStart","preventDefault","coordinates","handleMove","newCoordinates","handleEnd","undefined","el","addEventListener","removeEventListener","useLine","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","module","exports"],"mappings":"0LAIe,SAASA,IAAQ,IACpBC,EAASC,cAATD,KAER,OACI,mCACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOE,OAAK,EAACF,KAAMA,EAAnB,SACI,cAAC,IAAD,CAAUG,GAAE,gB,8DCTzB,SAASC,EAAgCC,GAAoE,IAApCC,EAAmC,uDAAT,QAChGC,EAAYC,iBAA0B,MAU5C,OARAC,qBAAU,WACN,IAAMC,EAASH,EAAUI,QACnBC,EAAG,OAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAQG,WAAWP,GAChC,GAAKM,EAEL,OAAOP,EAAaO,KACrB,CAACN,EAASD,IAENE,ECPI,SAASO,IACpB,IAAMC,EAAYX,GAAiC,SAAAY,GAC/CA,EAAGC,WAAW,EAAG,EAAG,EAAG,GACvBD,EAAGE,MAAMF,EAAGG,qBAGhB,OACI,mCACI,wBAAQC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,OAAOC,UAAWC,IAAOd,WCPhF,SAASe,EAAaT,EAA2BU,EAAcC,GAE3D,IAAIC,EAASZ,EAAGS,aAAaC,GAC7B,GAAKE,EAAL,CAOA,GALAZ,EAAGa,aAAaD,EAAQD,GAExBX,EAAGc,cAAcF,GAEHZ,EAAGe,mBAAmBH,EAAQZ,EAAGgB,gBAE3C,OAAOJ,EAGXK,QAAQC,IAAIlB,EAAGmB,iBAAiBP,IAChCZ,EAAGoB,aAAaR,IAoCb,SAASS,EAAUrB,EAA2BsB,EAAsBC,GAEvE,IAAIC,EAAef,EAAaT,EAAIA,EAAGyB,cAAeH,GAElDI,EAAiBjB,EAAaT,EAAIA,EAAG2B,gBAAiBJ,GAC1D,GAAKC,GAAiBE,EAGtB,OAlCJ,SAAuB1B,EAA2BwB,EAA2BE,GAEzE,IAAIE,EAAU5B,EAAG6B,gBACjB,GAAKD,EAAL,CAQA,GANA5B,EAAG8B,aAAaF,EAASJ,GACzBxB,EAAG8B,aAAaF,EAASF,GAEzB1B,EAAG+B,YAAYH,GAED5B,EAAGgC,oBAAoBJ,EAAS5B,EAAGiC,aAE7C,OAAOL,EAGXX,QAAQC,IAAIlB,EAAGkC,kBAAkBN,IACjC5B,EAAGmC,cAAcP,IAiBHC,CAAc7B,EAAIwB,EAAcE,GC5DnC,SAASU,IACpB,IAAMrC,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAuBtD,SAAS+B,EAAOrC,GAEZ,IAAM4B,EAAUP,EAAUrB,EArBZ,idAUE,yXAYhB,GAAK4B,EAAL,CAEA5B,EAAGsC,WAAWV,GAEd,IAAMW,EAAavC,EAAGwC,kBAAkBZ,EAAS,cAEjD5B,EAAGyC,eAAeF,EAAY,EAAK,EAAK,GAGxCvC,EAAG0C,WAAW1C,EAAG2C,OAAQ,EAAG,ICrCjB,SAASC,IACpB,IAAM7C,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAsBtD,SAAS+B,EAAOrC,GAEZ,IAAM4B,EAAUP,EAAUrB,EApBZ,gdAUE,oXAWhB,GAAK4B,EAAL,CAEA5B,EAAGsC,WAAWV,GAGd,IAMMiB,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aARpB,EACV,GAAK,EACN,GAAK,KAMgDlD,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cAEjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGwD,MAAO,EAAG,IC/ChB,SAASZ,IACpB,IAAM7C,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAuBtD,SAAS+B,EAAOrC,GAEZ,IAAM4B,EAAUP,EAAUrB,EArBZ,gdAUE,yXAYhB,GAAK4B,EAAL,CAEA5B,EAAGsC,WAAWV,GAGd,IAMMiB,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aARpB,EACV,GAAK,EACN,GAAK,EACL,EAAK,KAKgDlD,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cAEjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IChDpB,SAASC,IACpB,IAAM3D,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAGtD,SAAS+B,EAAOrC,IAKhB,SAAiBA,GAEb,IAkBM4B,EAAUP,EAAUrB,EAlBR,8QAUE,mMASpB,IAAK4B,EAAS,OAEd5B,EAAGsC,WAAWV,GAGd,IAAM+B,EAAS,CACX,IAAM,EAAM,EAAK,EAAK,EAAK,EAC3B,EAAK,EAAO,EAAK,EAAK,EAAK,EAC3B,EAAK,EAAO,EAAK,EAAK,EAAK,GAGzBd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAG3B,IAAMqB,EAAU5D,EAAGwC,kBAAkBZ,EAAS,WAC9C5B,EAAGoD,oBACCQ,EACA,EACA5D,EAAGqD,OACH,EACiC,EAAjCH,aAAaI,kBACoB,EAAjCJ,aAAaI,mBAEjBtD,EAAGuD,wBAAwBK,GAE3B5D,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GAxD/BI,CAAQ7D,GA2DZ,SAAiBA,GAMb,IAkBM4B,EAAUP,EAAUrB,EAlBR,8QAUE,mMASpB,IAAK4B,EAAS,OAEd5B,EAAGsC,WAAWV,GAGd,IAAM+B,EAAS,EACV,EAAK,EACN,EAAK,EACL,EAAK,IAGHG,EAAS,CACX,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,GAGbjB,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAC5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAG3B,IAAMwB,EAAc/D,EAAG8C,eACvB9C,EAAG+C,WAAW/C,EAAGgD,aAAce,GAC/B/D,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaY,GAAS9D,EAAGmD,aAC5D,IAAMS,EAAU5D,EAAGwC,kBAAkBZ,EAAS,WAC9C5B,EAAGoD,oBAAoBQ,EAAS,EAAG5D,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GACxFtD,EAAGuD,wBAAwBK,GAE3B5D,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GAnH/BO,CAAQhE,GCPG,SAASiE,IACpB,IAAMlE,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAsBtD,SAAS+B,EAAOrC,GACZ,IAAM4B,EAAUP,EAAUrB,EAnBZ,gdAUE,qXAUhB,GAAK4B,EAAL,CACA5B,EAAGsC,WAAWV,GAEd,IAAMsC,EAAO,SAACP,GACV,IAAMd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cAEjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IAanCS,EATe,EACX,EAAG,EACJ,EAAG,GACF,GAAI,IAeRA,EALsB,CAClB,EAAG,EACH,GAAI,EACJ,GAAI,KCzDG,SAASC,IACpB,OACI,qCACI,sEACA,cAAC,EAAD,IACA,kFACA,cAAC,EAAD,IACA,sEACA,cAACF,EAAD,O,6BCRL,SAAeG,EAAtB,kC,4CAAO,WACHC,GADG,+BAAAC,EAAA,yDAEHC,EAFG,gCAIGC,EAJH,+BAAAF,EAAA,MAIa,WAAOG,GAAP,SAAAH,EAAA,sEACN,IAAII,SAAQ,SAACC,EAASC,GACxB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GAAC,OAAKA,EAAEC,OAASN,EAAQK,EAAEC,OAAOC,QAAoBN,EAAO,IAAIO,MAAJ,WAC7EN,EAAOO,QAAU,SAAAC,GAAG,OAAIT,EAAOS,IAC/BR,EAAOS,cAAcb,MALb,mFAJb,sDAWsC,kBAAtBJ,EAXhB,qBAWiDA,EAXjD,sCAW2EG,EAAQH,GAXnF,iCAWGkB,EAXH,uBAaI,IAAIb,SAAQ,SAACC,EAASC,GACzB,IAAMY,EAAQ,IAAIC,MACdlB,IACAiB,EAAMjB,YAAc,aAExBiB,EAAMD,IAAMA,EACZC,EAAMT,OAAS,kBAAMJ,EAAQa,IAC7BA,EAAMJ,QAAUR,MApBjB,6C,sBCDQ,SAASc,IACpB,IAAMF,ECHH,SAAkBG,GAA4F,IAAtDpB,IAAqD,2DACtFqB,qBADsF,mBACzGJ,EADyG,KAClGK,EADkG,KAQhH,OANApG,qBAAU,WACN,sBAAC,4BAAA6E,EAAA,sEACuBF,EAAUuB,EAAKpB,GADtC,OACSiB,EADT,OAEGK,GAAS,kBAAML,KAFlB,0CAAD,KAID,CAACjB,EAAaoB,IACVH,EDLOM,CAAS,wDACjB/F,EAAYX,GAAiC,SAAAY,GAAE,OAAIwF,G,6CAASnD,CAAOrC,EAAIwF,MAC7E,OAAO,wBAAQpF,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAItD,IAAMkB,EAAY,gaAWZE,EAAc,sd,4CASpB,WAAsB1B,EAA2BwF,GAAjD,6BAAAlB,EAAA,yDAEU1C,EAAUP,EAAUrB,EAAIwB,EAAcE,GAFhD,iDAKI1B,EAAGsC,WAAWV,GAGR+B,EAAS,EACV,EAAG,EACJ,EAAG,GACF,GAAI,EACL,EAAG,GACF,GAAI,EACL,GAAI,GAGFoC,EAAY,CACd,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GAGDlD,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAEtDZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAErByD,EAAiBhG,EAAG8C,eAC1B9C,EAAG+C,WAAW/C,EAAGgD,aAAcgD,GAC/BhG,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAa6C,GAAY/F,EAAGmD,aAEzD8C,EAAajG,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoB6C,EAAY,EAAGjG,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwB0C,GAGrBC,EAAUlG,EAAGmG,gBACnBnG,EAAGoG,YAAYpG,EAAGqG,WAAYH,GAE9BlG,EAAGsG,cAActG,EAAGqG,WAAYrG,EAAGuG,eAAgBvG,EAAGwG,eACtDxG,EAAGsG,cAActG,EAAGqG,WAAYrG,EAAGyG,eAAgBzG,EAAGwG,eACtDxG,EAAGsG,cAActG,EAAGqG,WAAYrG,EAAG0G,mBAAoB1G,EAAG2G,SAC1D3G,EAAGsG,cAActG,EAAGqG,WAAYrG,EAAG4G,mBAAoB5G,EAAG2G,SAE1D3G,EAAG6G,YAAY7G,EAAG8G,oBAAqB,GAEvC9G,EAAG+G,WAAW/G,EAAGqG,WAAY,EAAGrG,EAAGgH,KAAMhH,EAAGgH,KAAMhH,EAAGiH,cAAezB,GAEpExF,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GAvDnC,6C,sBE7Be,SAASyD,IACpB,OACI,qCACI,0DACA,cAACxB,EAAD,OCHG,SAAS9C,IACpB,IAAM7C,EAAYX,EAAiCiD,GACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAGtD,SAAS+B,EAAOrC,IAYhB,SAAgCA,GAE5B,IAoBM4B,EAAUP,EAAUrB,EApBR,qwBAaE,mLAQpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAId,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAGtD,IAAMqD,EAAS,CACX,EAAG,EACH,EAAG,IACH,IAAK,KAGHd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GAzD/B6D,CAAuBtH,GAsI3B,SAA2BA,GAEvB,IAmBM4B,EAAUP,EAAUrB,EAnBR,qnBAWE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAEd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAGtD,IAAMqD,EAAS,CACX,EAAG,IACH,IAAK,EACL,IAAK,KAGHd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAG3B,IAAMgF,EAAuBvH,EAAGoH,mBAAmBxF,EAAS,WAC5D5B,EAAGwH,UAAUD,EAAsB,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAElEvH,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GApL/BgE,CAAkBzH,GAgEtB,SAAmCA,GAE/B,IAuBM4B,EAAUP,EAAUrB,EAvBR,2yBAeE,4PASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAEd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAGtD,IAAMqD,EAAS,CACX,EAAG,EACH,IAAK,EACL,IAAK,KAGHd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAG3B,IAAMuB,EAAS,CACX,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,GAGbC,EAAc/D,EAAG8C,eACvB9C,EAAG+C,WAAW/C,EAAGgD,aAAce,GAC/B/D,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaY,GAAS9D,EAAGmD,aAC5D,IAAMS,EAAU5D,EAAGwC,kBAAkBZ,EAAS,WAC9C5B,EAAGoD,oBAAoBQ,EAAS,EAAG5D,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GACxFtD,EAAGuD,wBAAwBK,GAE3B5D,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,GA5H/BiE,CAA0B1H,GCNvB,IAAM2H,EAAK,WAMV,MAAO,CACH,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,IATLA,EAYG,SAAUtH,EAAeC,GAGjC,MAAO,CACL,EAAID,EAAO,EAAG,EACd,GAAI,EAAIC,EAAQ,GACf,EAAG,EAAG,IAlBJqH,EAAK,SAqBFC,EAAYC,GAEpB,MAAO,CACH,EAAG,EAAG,EACN,EAAG,EAAG,EACND,EAAIC,EAAI,IA1BPF,EAAK,SA6BLG,GACL,IAAMC,EAAIC,KAAKC,IAAIH,GACfI,EAAIF,KAAKG,IAAIL,GAEjB,MAAO,CACHC,GAAGG,EAAG,EACNA,EAAGH,EAAG,EACN,EAAG,EAAG,IApCLJ,EAAK,SAuCNS,EAAYC,GAEhB,MAAO,CACHD,EAAI,EAAG,EACP,EAAGC,EAAI,EACP,EAAG,EAAG,IA5CLV,EAAK,SA+CLrD,EAASgE,GACd,IAAMC,EAAMjE,EAAE,GACVkE,EAAMlE,EAAE,GACRmE,EAAMnE,EAAE,GACRoE,EAAMpE,EAAE,GACRqE,EAAMrE,EAAE,GACRsE,EAAMtE,EAAE,GACRuE,EAAMvE,EAAE,GACRwE,EAAMxE,EAAE,GACRyE,EAAMzE,EAAE,GAEN0E,EAAMV,EAAE,GACVW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,GACRa,EAAMb,EAAE,GACRc,EAAMd,EAAE,GACRe,EAAMf,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRkB,EAAMlB,EAAE,GAEZ,MAAO,CACHU,EAAMT,EAAMU,EAAMP,EAAMQ,EAAML,EAC9BG,EAAMR,EAAMS,EAAMN,EAAMO,EAAMJ,EAC9BE,EAAMP,EAAMQ,EAAML,EAAMM,EAAMH,EAE9BI,EAAMZ,EAAMa,EAAMV,EAAMW,EAAMR,EAC9BM,EAAMX,EAAMY,EAAMT,EAAMU,EAAMP,EAC9BK,EAAMV,EAAMW,EAAMR,EAAMS,EAAMN,EAE9BO,EAAMf,EAAMgB,EAAMb,EAAMc,EAAMX,EAC9BS,EAAMd,EAAMe,EAAMZ,EAAMa,EAAMV,EAC9BQ,EAAMb,EAAMc,EAAMX,EAAMY,EAAMT,IAa7BU,EAAK,WAMV,MAAO,CACH,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,IAVRA,EAAK,SAaHpJ,EAAeC,EAAgBoJ,GAGtC,MAAO,CACH,EAAIrJ,EAAO,EAAG,EAAG,EACjB,GAAI,EAAIC,EAAQ,EAAG,EACnB,EAAG,EAAG,EAAIoJ,EAAO,GACjB,EAAG,EAAG,EAAG,IApBRD,EAAK,SAuBF7B,EAAYC,EAAY8B,GAEhC,MAAO,CACH,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT/B,EAAIC,EAAI8B,EAAI,IA7BXF,EAAK,SAgCJ3B,GACN,IAAMC,EAAIC,KAAKC,IAAIH,GACfI,EAAIF,KAAKG,IAAIL,GAEjB,MAAO,CACH,EAAG,EAAG,EAAG,EACT,EAAGC,EAAGG,EAAG,EACT,GAAIA,EAAGH,EAAG,EACV,EAAG,EAAG,EAAG,IAxCR0B,GAAK,SA2CJ3B,GACN,IAAMC,EAAIC,KAAKC,IAAIH,GACfI,EAAIF,KAAKG,IAAIL,GAEjB,MAAO,CACHC,EAAG,GAAIG,EAAG,EACV,EAAG,EAAG,EAAG,EACTA,EAAG,EAAGH,EAAG,EACT,EAAG,EAAG,EAAG,IAnDR0B,GAAK,SAsDJ3B,GACN,IAAMC,EAAIC,KAAKC,IAAIH,GACfI,EAAIF,KAAKG,IAAIL,GAEjB,MAAO,CACHC,EAAGG,EAAG,EAAG,GACRA,EAAGH,EAAG,EAAG,EACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,IA9DR0B,GAAK,SAiENrB,EAAYC,EAAYuB,GAE5B,MAAO,CACHxB,EAAI,EAAI,EAAI,EACZ,EAAGC,EAAK,EAAI,EACZ,EAAI,EAAGuB,EAAK,EACZ,EAAI,EAAI,EAAI,IAvEXH,GAAK,SA0ELnF,EAASgE,GACd,IAAMC,EAAMjE,EAAE,GACVkE,EAAMlE,EAAE,GACRmE,EAAMnE,EAAE,GACRuF,EAAMvF,EAAE,GACRoE,EAAMpE,EAAE,GACRqE,EAAMrE,EAAE,GACRsE,EAAMtE,EAAE,GACRwF,EAAMxF,EAAE,GACRuE,EAAMvE,EAAE,GACRwE,EAAMxE,EAAE,GACRyE,EAAMzE,EAAE,IACRyF,EAAMzF,EAAE,IACR0F,EAAM1F,EAAE,IACR2F,EAAM3F,EAAE,IACR4F,EAAM5F,EAAE,IACR6F,EAAM7F,EAAE,IAEN0E,EAAMV,EAAE,GACVW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,GACR8B,EAAM9B,EAAE,GACRa,EAAMb,EAAE,GACRc,EAAMd,EAAE,GACRe,EAAMf,EAAE,GACR+B,EAAM/B,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRkB,EAAMlB,EAAE,IACRgC,EAAMhC,EAAE,IACRiC,EAAMjC,EAAE,IACRkC,EAAMlC,EAAE,IACRmC,EAAMnC,EAAE,IACRoC,EAAMpC,EAAE,IACZ,MAAO,CACHU,EAAMT,EAAMU,EAAMP,EAAMQ,EAAML,EAAMuB,EAAMJ,EAC1ChB,EAAMR,EAAMS,EAAMN,EAAMO,EAAMJ,EAAMsB,EAAMH,EAC1CjB,EAAMP,EAAMQ,EAAML,EAAMM,EAAMH,EAAMqB,EAAMF,EAC1ClB,EAAMa,EAAMZ,EAAMa,EAAMZ,EAAMa,EAAMK,EAAMD,EAE1ChB,EAAMZ,EAAMa,EAAMV,EAAMW,EAAMR,EAAMwB,EAAML,EAC1Cb,EAAMX,EAAMY,EAAMT,EAAMU,EAAMP,EAAMuB,EAAMJ,EAC1Cd,EAAMV,EAAMW,EAAMR,EAAMS,EAAMN,EAAMsB,EAAMH,EAC1Cf,EAAMU,EAAMT,EAAMU,EAAMT,EAAMU,EAAMM,EAAMF,EAE1Cb,EAAMf,EAAMgB,EAAMb,EAAMc,EAAMX,EAAMyB,EAAMN,EAC1CV,EAAMd,EAAMe,EAAMZ,EAAMa,EAAMV,EAAMwB,EAAML,EAC1CX,EAAMb,EAAMc,EAAMX,EAAMY,EAAMT,EAAMuB,EAAMJ,EAC1CZ,EAAMO,EAAMN,EAAMO,EAAMN,EAAMO,EAAMO,EAAMH,EAE1CI,EAAMhC,EAAMiC,EAAM9B,EAAM+B,EAAM5B,EAAM6B,EAAMV,EAC1CO,EAAM/B,EAAMgC,EAAM7B,EAAM8B,EAAM3B,EAAM4B,EAAMT,EAC1CM,EAAM9B,EAAM+B,EAAM5B,EAAM6B,EAAM1B,EAAM2B,EAAMR,EAC1CK,EAAMV,EAAMW,EAAMV,EAAMW,EAAMV,EAAMW,EAAMP,IC5NvC,SAASQ,KACpB,IAAM5K,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,SAGtD,SAAS+B,GAAOrC,GAEZ,IAgBM4B,EAAUP,EAAUrB,EAhBR,8LAQE,mRASpB,GAAK4B,EAAL,CACA5B,EAAGsC,WAAWV,GAGd,IAMMiB,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aARpB,CACX,EAAG,IACH,IAAK,EACL,IAAK,MAKgDlD,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAG3B,IAAMgF,EAAuBvH,EAAGoH,mBAAmBxF,EAAS,WAC5D5B,EAAGwH,UAAUD,EAAsB,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAGlE,IAAIqD,EAAc,CAAC,EAAG,GAElBC,EAAQ,CAAC,EAAG,GACVC,EAAoBnD,EAAeiD,EAAY,GAAIA,EAAY,IAC/DG,EAAiBpD,EAHF,GAIfqD,EAAcrD,EAAWkD,EAAM,GAAIA,EAAM,IAEzCI,EAAmBtD,EAAc3H,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAE9D4K,EAASvD,IACbuD,EAASvD,EAAYsD,EAAkBH,GACvCI,EAASvD,EAAYuD,EAAQH,GAC7BG,EAASvD,EAAYuD,EAAQF,GAE7B,IAAMG,EAAWnL,EAAGoH,mBAAmBxF,EAAS,YAChD5B,EAAGoL,iBAAiBD,GAAU,EAAOD,GAErClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,ICjEpB,SAASU,KACpB,OACI,qCACI,0GACA,cAAC,EAAD,IACA,4HACA,cAAC,GAAD,OCNG,SAASkH,KACpB,IAAMtL,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,OAAOC,OAAO,SAGvD,SAAS+B,GAAOrC,IAWhB,SAAqBA,GAEjB,IAqBM4B,EAAUP,EAAUrB,EArBR,qwBAaE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAC/C5B,EAAGwH,UAAU8D,EAAS,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAGrD,IAAM3H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IA/E/B8H,CAAYvL,GAkFhB,SAAwBA,GAEpB,IAoBM4B,EAAUP,EAAUrB,EApBR,onBAYE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAE/C5B,EAAGwL,WAAWF,EAAS,CAACtD,KAAKyD,SAAUzD,KAAKyD,SAAUzD,KAAKyD,SAAU,IAGrE,IAAM9H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAI3B,WACI,IAAMqI,EAAc,CAAC,IAAK,KACpBc,EAAgB1L,EAAGoH,mBAAmBxF,EAAS,iBAErD5B,EAAG2L,WAAWD,EAAed,GAC7B5K,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IALnC,GAxJAmI,CAAe5L,GCPJ,SAAS6L,KACpB,IAAM9L,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,OAAOC,OAAO,SAGvD,SAAS+B,GAAOrC,IAWhB,SAAqBA,GAEjB,IAqBM4B,EAAUP,EAAUrB,EArBR,qwBAaE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAC/C5B,EAAGwH,UAAU8D,EAAS,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAGrD,IAAM3H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IA/E/B8H,CAAYvL,GAkFhB,SAAuBA,GAEnB,IA2BM4B,EAAUP,EAAUrB,EA3BR,igCAmBE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAE/C5B,EAAGwL,WAAWF,EAAS,CAACtD,KAAKyD,SAAUzD,KAAKyD,SAAUzD,KAAKyD,SAAU,IAGrE,IAAM9H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAI3B,WACI,IAAMqI,EAAc,CAAC,IAAK,KACtBkB,EAAW,EAAE,GAAK,GAChBJ,EAAgB1L,EAAGoH,mBAAmBxF,EAAS,iBAC/CmK,EAAa/L,EAAGoH,mBAAmBxF,EAAS,cAElD5B,EAAG2L,WAAWD,EAAed,GAC7B5K,EAAG2L,WAAWI,EAAYD,GAC1B9L,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IARnC,GA/JAuI,CAAchM,GCPH,SAASiM,KACpB,IAAMlM,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,OAAOC,OAAO,SAGvD,SAAS+B,GAAOrC,IAWhB,SAAqBA,GAEjB,IAqBM4B,EAAUP,EAAUrB,EArBR,qwBAaE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAC/C5B,EAAGwH,UAAU8D,EAAS,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAGrD,IAAM3H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IA/E/B8H,CAAYvL,GAkFhB,SAAsBA,GAElB,IA8BM4B,EAAUP,EAAUrB,EA9BR,ouCAsBE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAE/C5B,EAAGwL,WAAWF,EAAS,CAACtD,KAAKyD,SAAUzD,KAAKyD,SAAUzD,KAAKyD,SAAU,IAGrE,IAAM9H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAI3B,WACI,IAAMqI,EAAc,CAAC,IAAK,KACtBkB,EAAW,EAAE,GAAK,GAClBjB,EAAQ,CAAC,EAAG,GACVa,EAAgB1L,EAAGoH,mBAAmBxF,EAAS,iBAC/CmK,EAAa/L,EAAGoH,mBAAmBxF,EAAS,cAC5CsK,EAAUlM,EAAGoH,mBAAmBxF,EAAS,WAE/C5B,EAAG2L,WAAWD,EAAed,GAC7B5K,EAAG2L,WAAWI,EAAYD,GAC1B9L,EAAG2L,WAAWO,EAASrB,GACvB7K,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IAXnC,GAlKA0I,CAAanM,GCNF,SAASqL,KACpB,IAAMtL,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,OAAOC,OAAO,SAGvD,SAAS+B,GAAOrC,IAWhB,SAAqBA,GAEjB,IAiBM4B,EAAUP,EAAUrB,EAjBR,wXASE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAC/C5B,EAAGwH,UAAU8D,EAAS,GAAK,IAAK,GAAK,IAAK,IAAM,IAAK,GAGrD,IAAM3H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAE3BvC,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IA3E/B8H,CAAYvL,GA8EhB,SAAwBA,GAEpB,IAoBM4B,EAAUP,EAAUrB,EApBR,ooBAYE,mRASpB,IAAK4B,EAAS,OACd5B,EAAGsC,WAAWV,GAKd,IAAMuF,EAAenH,EAAGoH,mBAAmBxF,EAAS,gBACpD5B,EAAGqH,UAAUF,EAAcnH,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,QAEtD,IAAMgL,EAAUtL,EAAGoH,mBAAmBxF,EAAS,WAE/C5B,EAAGwL,WAAWF,EAAS,CAACtD,KAAKyD,SAAUzD,KAAKyD,SAAUzD,KAAKyD,SAAU,IAGrE,IAAM9H,EAAS,CAEX,EAAG,EACH,GAAI,EACJ,EAAG,IACH,EAAG,IACH,GAAI,EACJ,GAAI,IAEJ,GAAI,EACJ,IAAK,EACL,GAAI,GACJ,GAAI,GACJ,IAAK,EACL,IAAK,GAEL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAGFd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAwC,EAAjCH,aAAaI,kBAAuB,GAC3FtD,EAAGuD,wBAAwBhB,GAI3B,WACI,IAAMqI,EAAc,CAAC,IAAK,KACtB9C,EAAQ,EACR+C,EAAQ,CAAC,EAAG,GAEVC,EAAoBnD,EAAeiD,EAAY,GAAIA,EAAY,IACjEG,EAAiBpD,EAAYG,GAC7BkD,EAAcrD,EAAWkD,EAAM,GAAIA,EAAM,IAEzCK,EAASvD,EAAYmD,EAAmBC,GAC5CG,EAASvD,EAAYuD,EAAQF,GAE7B,IAAMG,EAAWnL,EAAGoH,mBAAmBxF,EAAS,YAChD5B,EAAGoL,iBAAiBD,GAAU,EAAOD,GAGrClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IAhBnC,GAqBA,WAYI,IAXA,IAAMmH,EAAc,CAAC,IAAK,KACtB9C,EAAQ,EACR+C,EAAQ,CAAC,EAAG,GAEVC,EAAoBnD,EAAeiD,EAAY,GAAIA,EAAY,IACjEG,EAAiBpD,EAAYG,GAC7BkD,EAAcrD,EAAWkD,EAAM,GAAIA,EAAM,IAEzCK,EAASvD,IAEPwD,EAAWnL,EAAGoH,mBAAmBxF,EAAyB,YACvDwK,EAAI,EAAGA,EAAI,EAAGA,IACnBlB,EAASvD,EAAYuD,EAAQJ,GAC7BI,EAASvD,EAAYuD,EAAQH,GAC7BG,EAASvD,EAAYuD,EAAQF,GAE7BhL,EAAGwL,WAAWF,EAAS,CAACtD,KAAKyD,SAAUzD,KAAKyD,SAAUzD,KAAKyD,SAAU,IAErEzL,EAAGoL,iBAAiBD,GAAU,EAAOD,GAErClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IArBvC,GAzKAmI,CAAe5L,GCPJ,SAASqL,KACpB,IAAMtL,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,QAGtD,SAAS+B,GAAOrC,IAWhB,SAAqBA,GAEjB,IAsBM4B,EAAUP,EAAUrB,EAtBR,wVAYE,qQAWpB,IAAK4B,EAAS,OAEd5B,EAAGE,MAAMF,EAAGG,iBAAmBH,EAAGqM,kBAClCrM,EAAGsM,OAAOtM,EAAGuM,YAEbvM,EAAGsC,WAAWV,GAId,IAAM+B,EAAS,CAEX,EAAK,EAAI,EACT,EAAG,IAAM,EACT,GAAM,EAAI,EACV,EAAG,IAAM,EACT,GAAI,IAAM,EACV,GAAM,EAAI,EAGV,GAAM,EAAI,EACV,GAAK,GAAK,EACV,IAAO,EAAI,EACX,GAAK,GAAK,EACV,IAAM,GAAK,EACX,IAAO,EAAI,EAGX,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EAGV,EAAK,EAAI,GACT,GAAM,EAAI,GACV,EAAG,IAAM,GACT,EAAG,IAAM,GACT,GAAM,EAAI,GACV,GAAI,IAAM,GAGV,GAAM,EAAI,GACV,IAAO,EAAI,GACX,GAAK,GAAK,GACV,GAAK,GAAK,GACV,IAAO,EAAI,GACX,IAAM,GAAK,GAGX,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GAGV,EAAK,EAAK,EACV,IAAO,EAAK,EACZ,IAAO,EAAI,GACX,EAAK,EAAK,EACV,IAAO,EAAI,GACX,EAAK,EAAI,GAGT,IAAO,EAAK,EACZ,IAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAO,EAAK,EACZ,IAAM,GAAK,GACX,IAAO,EAAI,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,IAAM,GAAK,GACX,GAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAK,IAAM,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAK,IAAO,EACZ,GAAK,IAAM,GAGX,EAAK,IAAO,EACZ,EAAK,IAAM,GACX,GAAK,IAAM,GACX,EAAK,IAAO,EACZ,GAAK,IAAM,GACX,GAAK,IAAO,EAGZ,EAAK,EAAK,EACV,EAAK,EAAI,GACT,EAAG,IAAM,GACT,EAAK,EAAK,EACV,EAAG,IAAM,GACT,EAAG,IAAO,GAGRd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5D,IAAMZ,EAAavC,EAAGwC,kBAAkBZ,EAAS,cACjD5B,EAAGuD,wBAAwBhB,GAC3BvC,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAO,EAAG,GAI1D,IAAMS,EAAS,CAEX,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IAGT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,KAIRC,EAAc/D,EAAG8C,eACvB9C,EAAG+C,WAAW/C,EAAGgD,aAAce,GAC/B/D,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIwJ,WAAW1I,GAAS9D,EAAGmD,aAE1D,IAAMS,EAAU5D,EAAGwC,kBAAkBZ,EAAS,WAI9C,SAAS6K,EAASC,GACd,OAAQA,EAAI1E,KAAK2E,GAAM,IAJ3B3M,EAAGoD,oBAAoBQ,EAAS,EAAG5D,EAAGiH,eAAe,EAAM,EAAG,GAC9DjH,EAAGuD,wBAAwBK,GAM3B,IAAIgH,EAAc,CAAC,GAAI,IAAK,GACxBkB,EAAW,CAACW,EAAS,IAAKA,EAAS,IAAKA,EAAS,MACjD5B,EAAQ,CAAC,EAAG,EAAG,GACbC,EAAoBrB,EAAemB,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAC/EgC,EAAkBnD,EAAaqC,EAAS,IACxCe,EAAkBpD,GAAaqC,EAAS,IACxCgB,EAAkBrD,GAAaqC,EAAS,IACxCd,EAAcvB,GAAWoB,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAEnDI,EAAmBxB,EAAczJ,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,OAAQ,KAEtE4K,EAASzB,IACbyB,EAASzB,GAAYwB,EAAkBH,GACvCI,EAASzB,GAAYyB,EAAQ0B,GAC7B1B,EAASzB,GAAYyB,EAAQ2B,GAC7B3B,EAASzB,GAAYyB,EAAQ4B,GAC7B5B,EAASzB,GAAYyB,EAAQF,GAE7B,IAAMG,EAAWnL,EAAGoH,mBAAmBxF,EAAS,YAChD5B,EAAG+M,iBAAiB5B,GAAU,EAAOD,GAGrClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IA7V/B8H,CAAYvL,GCJD,SAASkH,KACpB,OACI,qCACI,8CACA,cAACmE,GAAD,IACA,2DACA,cAACQ,GAAD,IACA,wEACA,cAACI,GAAD,IACA,8CACA,cAAC,GAAD,IACA,iDACA,cAAC,GAAD,OCdG,SAASZ,KACpB,IAAMtL,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,QAGtD,SAAS+B,GAAOrC,GAEZ,IAqBM4B,EAAUP,EAAUrB,EArBR,0TAYE,gPAUpB,GAAK4B,EAAL,CAEA5B,EAAGsC,WAAWV,GAEd5B,EAAGE,MAAMF,EAAGG,iBAAmBH,EAAGqM,kBAClCrM,EAAGsM,OAAOtM,EAAGuM,YAGb,IAAMhK,EAAavC,EAAGwC,kBAAkBZ,EAAS,eA+GrD,SAAoB5B,EAA2BuC,GAG3C,IAAMoB,EAAS,CAEX,EAAG,EAAG,EACN,IAAK,EAAG,EACR,IAAK,IAAK,EACV,IAAK,IAAK,EACV,EAAG,EAAG,EACN,EAAG,IAAK,EAER,EAAG,EAAG,EACN,IAAK,EAAG,EACR,IAAK,GAAI,IACT,IAAK,GAAI,IACT,EAAG,EAAG,EACN,EAAG,GAAI,IAEP,EAAG,EAAG,EACN,EAAG,IAAK,EACR,EAAG,KAAM,IACT,EAAG,GAAI,IACP,EAAG,KAAM,IACT,EAAG,EAAG,EAEN,IAAK,KAAM,IACX,IAAK,IAAK,EACV,EAAG,IAAK,EACR,EAAG,KAAM,IACT,EAAG,IAAK,EACR,IAAK,KAAM,IAEX,IAAK,KAAM,IACX,EAAG,KAAM,IACT,EAAG,GAAI,IACP,IAAK,GAAI,IACT,EAAG,GAAI,IACP,IAAK,KAAM,IAEX,IAAK,KAAM,IACX,IAAK,IAAK,EACV,IAAK,EAAG,EACR,IAAK,GAAI,IACT,IAAK,EAAG,EACR,IAAK,KAAM,KAITd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5DnD,EAAGuD,wBAAwBhB,GAC3BvC,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAO,EAAG,GApK1D2J,CAAWhN,EAAIuC,GAGf,IAAMqB,EAAU5D,EAAGwC,kBAAkBZ,EAAS,YAoKlD,SAAkB5B,EAA2B4D,GAGzC,IAAME,EAAS,CAEX,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAEV,IAAM,IAAK,IACX,IAAM,IAAK,IACX,IAAM,IAAK,IACX,IAAM,IAAK,IACX,IAAM,IAAK,IACX,IAAM,IAAK,IAEX,EAAI,EAAG,EACP,EAAI,EAAG,EACP,EAAI,EAAG,EACP,EAAI,EAAG,EACP,EAAI,EAAG,EACP,EAAI,EAAG,EAEP,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAET,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IAEV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,KAKPC,EAAc/D,EAAG8C,eACvB9C,EAAG+C,WAAW/C,EAAGgD,aAAce,GAC/B/D,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIwJ,WAAW1I,GAAS9D,EAAGmD,aAE1DnD,EAAGoD,oBAAoBQ,EAAS,EAAG5D,EAAGiH,eAAe,EAAM,EAAG,GAC9DjH,EAAGuD,wBAAwBK,GA1N3BqJ,CAASjN,EAAI4D,GAOb,IAAMsJ,EAAU,CACZtC,YAAa,CAAC,IAAK,IAAK,GACxBkB,SAAU,CAACW,EAAS,IAAKA,EAAS,IAAKA,EAAS,KAChD5B,MAAO,CAAC,EAAG,EAAG,IAMZM,EAAWnL,EAAGoH,mBAAmBxF,EAAS,YAE5CuL,EAAO,EACPC,EAAQ,EAgBZ,OAfa,SAASlJ,EAAKmJ,GAEvB,IAAMC,GADND,GAAO,MACiBF,EACxBA,EAAOE,EAEPH,EAAQpB,SAAS,IAAM,IAAMwB,EAmBrC,SACItN,EACAmL,GAUD,IATC+B,EASF,uDALM,CACAtC,YAAa,CAAC,EAAG,EAAG,GACpBkB,SAAU,CAAC,EAAG,EAAG,GACjBjB,MAAO,CAAC,EAAG,EAAG,IAGVD,EAAiCsC,EAAjCtC,YAAakB,EAAoBoB,EAApBpB,SAAUjB,EAAUqC,EAAVrC,MAGzBC,EAAoBrB,EAAemB,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAC/EgC,EAAkBnD,EAAaqC,EAAS,IACxCe,EAAkBpD,GAAaqC,EAAS,IACxCgB,EAAkBrD,GAAaqC,EAAS,IACxCd,EAAcvB,GAAWoB,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAEnDI,EAAmBxB,EAAczJ,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,OAAQ,KAEtE4K,EAASzB,IACbyB,EAASzB,GAAYwB,EAAkBH,GACvCI,EAASzB,GAAYyB,EAAQ0B,GAC7B1B,EAASzB,GAAYyB,EAAQ2B,GAC7B3B,EAASzB,GAAYyB,EAAQ4B,GAC7B5B,EAASzB,GAAYyB,EAAQF,GAG7BE,EAASzB,GAAYyB,EAAQzB,GAAgB,IAAK,GAAI,KAEtDzJ,EAAG+M,iBAAiB5B,GAAU,EAAOD,GAGrClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IAtD3B8J,CAAWvN,EAAImL,EAAU+B,GAEzBE,EAAQI,sBAAsBtJ,GAGlCA,CAAK,GAGE,kBAAMuJ,qBAAqBL,IAjClC,SAASX,EAASC,GACd,OAAQA,EAAI1E,KAAK2E,GAAM,KC7ChB,SAAStB,KACpB,IAAMtL,EAAYX,EAAiCiD,IACnD,OAAO,wBAAQjC,IAAKL,EAAWM,MAAM,MAAMC,OAAO,QAGtD,SAAS+B,GAAOrC,GAEZ,IAqBM4B,EAAUP,EAAUrB,EArBR,0TAYE,gPAUpB,GAAK4B,EAAL,CAEA5B,EAAGsC,WAAWV,GAEd5B,EAAGE,MAAMF,EAAGG,iBAAmBH,EAAGqM,kBAClCrM,EAAGsM,OAAOtM,EAAGuM,YAGb,IAAMhK,EAAavC,EAAGwC,kBAAkBZ,EAAS,eAwFrD,SAAoB5B,EAA2BuC,GAG3C,IAAMoB,EAAS,CAEX,EAAK,EAAI,EACT,EAAG,IAAM,EACT,GAAM,EAAI,EACV,EAAG,IAAM,EACT,GAAI,IAAM,EACV,GAAM,EAAI,EAGV,GAAM,EAAI,EACV,GAAK,GAAK,EACV,IAAO,EAAI,EACX,GAAK,GAAK,EACV,IAAM,GAAK,EACX,IAAO,EAAI,EAGX,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EAGV,EAAK,EAAI,GACT,GAAM,EAAI,GACV,EAAG,IAAM,GACT,EAAG,IAAM,GACT,GAAM,EAAI,GACV,GAAI,IAAM,GAGV,GAAM,EAAI,GACV,IAAO,EAAI,GACX,GAAK,GAAK,GACV,GAAK,GAAK,GACV,IAAO,EAAI,GACX,IAAM,GAAK,GAGX,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GAGV,EAAK,EAAK,EACV,IAAO,EAAK,EACZ,IAAO,EAAI,GACX,EAAK,EAAK,EACV,IAAO,EAAI,GACX,EAAK,EAAI,GAGT,IAAO,EAAK,EACZ,IAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAO,EAAK,EACZ,IAAM,GAAK,GACX,IAAO,EAAI,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,IAAM,GAAK,GACX,GAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAK,IAAM,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAK,IAAO,EACZ,GAAK,IAAM,GAGX,EAAK,IAAO,EACZ,EAAK,IAAM,GACX,GAAK,IAAM,GACX,EAAK,IAAO,EACZ,GAAK,IAAM,GACX,GAAK,IAAO,EAGZ,EAAK,EAAK,EACV,EAAK,EAAI,GACT,EAAG,IAAM,GACT,EAAK,EAAK,EACV,EAAG,IAAM,GACT,EAAG,IAAO,GAIRd,EAAS7C,EAAG8C,eAClB9C,EAAG+C,WAAW/C,EAAGgD,aAAcH,GAC/B7C,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIE,aAAaS,GAAS3D,EAAGmD,aAE5DnD,EAAGuD,wBAAwBhB,GAC3BvC,EAAGoD,oBAAoBb,EAAY,EAAGvC,EAAGqD,OAAO,EAAO,EAAG,GAlO1D2J,CAAWhN,EAAIuC,GAGf,IAAMqB,EAAU5D,EAAGwC,kBAAkBZ,EAAS,YAkOlD,SAAkB5B,EAA2B4D,GAGzC,IAAME,EAAS,CAEX,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IACV,IAAM,GAAI,IAGV,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IACR,GAAI,GAAI,IAGR,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IACT,IAAK,GAAI,IAGT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GACV,IAAK,IAAK,GAGV,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IACT,GAAI,IAAK,IAGT,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,KAIRC,EAAc/D,EAAG8C,eACvB9C,EAAG+C,WAAW/C,EAAGgD,aAAce,GAC/B/D,EAAGiD,WAAWjD,EAAGgD,aAAc,IAAIwJ,WAAW1I,GAAS9D,EAAGmD,aAE1DnD,EAAGoD,oBAAoBQ,EAAS,EAAG5D,EAAGiH,eAAe,EAAM,EAAG,GAC9DjH,EAAGuD,wBAAwBK,GA5W3BqJ,CAASjN,EAAI4D,GAOb,IAAMsJ,EAAU,CACZtC,YAAa,CAAC,IAAK,IAAK,GACxBkB,SAAU,CAACW,EAAS,IAAKA,EAAS,IAAKA,EAAS,IAChD5B,MAAO,CAAC,EAAG,EAAG,IAMZM,EAAWnL,EAAGoH,mBAAmBxF,EAAS,YAE5CuL,EAAO,EACPC,EAAQ,EAgBZ,OAfa,SAASlJ,EAAKmJ,GAEvB,IAAMC,GADND,GAAO,MACiBF,EACxBA,EAAOE,EAEPH,EAAQpB,SAAS,IAAM,IAAMwB,EAmBrC,SACItN,EACAmL,GAUD,IATC+B,EASF,uDALM,CACAtC,YAAa,CAAC,EAAG,EAAG,GACpBkB,SAAU,CAAC,EAAG,EAAG,GACjBjB,MAAO,CAAC,EAAG,EAAG,IAGVD,EAAiCsC,EAAjCtC,YAAakB,EAAoBoB,EAApBpB,SAAUjB,EAAUqC,EAAVrC,MAGzBC,EAAoBrB,EAAemB,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAC/EgC,EAAkBnD,EAAaqC,EAAS,IACxCe,EAAkBpD,GAAaqC,EAAS,IACxCgB,EAAkBrD,GAAaqC,EAAS,IACxCd,EAAcvB,GAAWoB,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAEnDI,EAAmBxB,EAAczJ,EAAGN,OAAOW,MAAOL,EAAGN,OAAOY,OAAQ,KAEtE4K,EAASzB,IACbyB,EAASzB,GAAYwB,EAAkBH,GACvCI,EAASzB,GAAYyB,EAAQ0B,GAC7B1B,EAASzB,GAAYyB,EAAQ2B,GAC7B3B,EAASzB,GAAYyB,EAAQ4B,GAC7B5B,EAASzB,GAAYyB,EAAQF,GAE7BE,EAASzB,GAAYyB,EAAQzB,GAAgB,IAAK,IAAK,KAEvDzJ,EAAG+M,iBAAiB5B,GAAU,EAAOD,GAGrClL,EAAG0C,WAAW1C,EAAGyD,UAAW,EAAG,IArD3B8J,CAAWvN,EAAImL,EAAU+B,GAEzBE,EAAQI,sBAAsBtJ,GAGlCA,CAAK,GAGE,kBAAMuJ,qBAAqBL,IAjClC,SAASX,EAASC,GACd,OAAQA,EAAI1E,KAAK2E,GAAM,KClC/B,IAAMe,GAAS,CACX,CACIC,KAAM,MACNC,MAAO,QACPC,UAAW,MAEf,CACIF,KAAM,cACNC,MAAO,oBACPC,UAAW,cAAC/N,EAAD,KAEf,CACI6N,KAAM,QACNC,MAAO,cACPC,UAAW,cAACzL,EAAD,KAEf,CACIuL,KAAM,OACNC,MAAO,aACPC,UAAW,cAAC,EAAD,KAEf,CACIF,KAAM,WACNC,MAAO,iBACPC,UAAW,cAAC1J,EAAD,KAEf,CACIwJ,KAAM,UACNC,MAAO,gBACPC,UAAW,cAAC3G,EAAD,KAEf,CACIyG,KAAM,aACNC,MAAO,mBACPC,UAAW,cAAC,GAAD,KAEf,CACIF,KAAM,SACNC,MAAO,eACPC,UAAW,cAAC,GAAD,KAEf,CACIF,KAAM,OACNC,MAAO,aACPC,UAAW,cAAC,GAAD,KAEf,CACIF,KAAM,YACNC,MAAO,kBACPC,UAAW,cAAC,GAAD,MAIJ,SAASC,KAAQ,IACpB9O,EAASC,cAATD,KACA+O,EAAaC,cAAbD,SACFE,EAAUC,cAHW,EAKDtI,mBAAS,CAC/BuI,MAAM,IANiB,mBAKpBC,EALoB,KAKbC,EALa,KASrBC,EAAYZ,GAAOa,MAAK,qBAAGX,QAAsBG,KAEjDS,EAAWF,EAAYA,EAAUX,KAAO,OAExCc,EAAe,WACjBJ,EAAS,2BAAKD,GAAN,IAAaD,MAAOC,EAAMD,SAYhCO,EACF,cAAC,IAAD,UACKhB,GAAOiB,KAAI,WAAkBC,GAAW,IAA1BhB,EAAyB,EAAzBA,MAAOD,EAAkB,EAAlBA,KAClB,OACI,cAAC,IAAKkB,KAAN,CACItO,UAAWwN,IAAaH,EAAQ,SAAW,GAE3CkB,cAAY,EACZC,QAAS,kBAjBb,SAACnB,GACbS,EAAS,2BAAKD,GAAN,IAAaD,MAAM,KAC3BJ,IAAaH,GAASK,EAAQe,KAAKpB,GAeJqB,CAAQrB,IAJ3B,SAMKD,GAJIiB,QAWzB,OACI,qCACI,cAAC,IAAD,CACIrO,UAAWC,IAAO0O,OAClBC,KAAK,OACLC,KAAM,cAAC,IAAD,CAAM1O,KAAK,aACjB2O,YAAaZ,EACba,aAAc,cAAC,IAAD,CAAMP,QAAS,WA3BrCQ,OAAOC,SAASC,UA2BuC/O,KAAK,iBALxD,SAOK8N,IAEL,cAAC,IAAD,CACIjO,UAAWC,IAAOkP,OAClBC,MAAO,CAAEC,UAAWC,SAASC,gBAAgBC,cAC7CC,kBAAkB,EAClBtB,QAASA,EACTP,KAAMC,EAAMD,KACZM,aAAcA,EANlB,SAQI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOzP,KAAI,UAAKA,GAAQE,OAAK,EAA7B,yCAOCwO,GAAOiB,KACJ,gBAAGf,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACIA,GACI,cAAC,IAAD,CAAmB7O,KAAM4O,EAAzB,SACKC,GADOD,MAMxB,cAAC,IAAD,CAAO5O,KAAI,UAAKA,EAAL,MAAX,SACI,qDClJxB,IAAMiR,GAAQV,OAAOW,WACjBC,GAASZ,OAAOa,YAEL,SAASC,KACpB,IAAM9Q,EAAYC,iBAA0B,MAM5C,OC+HG,SACHD,GAMD,IALC2N,EAKF,uDALY,CACNoD,YAAa,UACbC,UAAW,GACXC,SAAU,IAGRC,EAAWC,uBAAY,SAAC9Q,GAAmC,IAAD,EAClCA,EAAIF,OAAtBW,EADoD,EACpDA,MAAOC,EAD6C,EAC7CA,OACfV,EAAI+Q,UAAU,EAAG,EAAGtQ,EAAOC,GAC3BV,EAAIgR,YACJhR,EAAIiR,YAAY,CAAC,EAAG,IACpBjR,EAAIiR,YAAY,IAL4C,IAOpDP,EAAqCpD,EAArCoD,YAAaC,EAAwBrD,EAAxBqD,UAAWC,EAAatD,EAAbsD,SAEhC5Q,EAAI0Q,YAAcA,EAClB1Q,EAAI2Q,UAAYA,EAIhB,IADA,IAAIO,EAAS,EACNA,EAASzQ,GACZyQ,GAAUN,EACV5Q,EAAImR,OAAOD,EAAQ,GACnBlR,EAAIoR,OAAOF,EAAQxQ,GAEvBV,EAAIqR,SAGJ,IADA,IAAIC,EAAS,EACNA,EAAS5Q,GACZ4Q,GAAUV,EACV5Q,EAAImR,OAAO,EAAGG,GACdtR,EAAIoR,OAAO3Q,EAAO6Q,GAEtBtR,EAAIqR,WAEL,IAEHxR,qBAAU,WACN,IAAMC,EAASH,EAAUI,QACnBC,EAAG,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,WAAW,MAC1BD,GACL6Q,EAAS7Q,KAEV,CAACL,IDhLJ4R,CAAQ5R,GCML,SACHA,GAUD,IATC2N,EASF,uDALM,CACAoD,YAAa,MACbc,SAAU,QACVb,UAAW,GAEjB,EAOsC3K,oBAAS,GAP/C,mBAOSyL,EAPT,KAOqBC,EAPrB,OAQ4C1L,qBAR5C,mBAQS2L,EART,KAQwBC,EARxB,KAUQC,EAAiBf,uBACnB,SAACgB,GACG,IAAMhS,EAASH,EAAUI,QACzB,GAAKD,EAAL,CAFgC,MAIFgS,EAAqBC,eAC5CD,EAAqBC,eAAe,GACpCD,EAFCE,EAJwB,EAIxBA,QAASC,EAJe,EAIfA,QAMjB,MAAO,CAAEC,EAAGF,EAFsBlS,EAA1BqS,WAE0BC,EAAGH,EAFHnS,EAAduS,cAIxB,CAAC1S,IAGC2S,EAAWxB,uBACb,SAACyB,EAAkBhT,GACf,IAAMO,EAASH,EAAUI,QACnBC,EAAG,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,WAAW,MAC1BD,IAELA,EAAI0Q,YAAcpD,EAAQoD,YAC1B1Q,EAAIwR,SAAWlE,EAAQkE,SACvBxR,EAAI2Q,UAAYrD,EAAQqD,UAExB3Q,EAAIgR,YACJhR,EAAImR,OAAOoB,EAAKL,EAAGK,EAAKH,GACxBpS,EAAIoR,OAAO7R,EAAG2S,EAAG3S,EAAG6S,GACpBpS,EAAIwS,YAEJxS,EAAIqR,YAER,CAAC1R,EAAW2N,IAGVmF,EAAc3B,uBAChB,SAACgB,GACGA,EAAMY,iBACNhB,GAAc,GACd,IAAMiB,EAAcd,EAAeC,GAC9Ba,GACLf,EAAiBe,KAErB,CAACd,IAGCe,EAAa9B,uBACf,SAACgB,GAEG,GADAA,EAAMY,iBACDjB,GAAeE,EAApB,CAEA,IAAMkB,EAAiBhB,EAAeC,GACjCe,IAELP,EAASX,EAAekB,GACxBjB,EAAiBiB,OAErB,CAACP,EAAUT,EAAgBJ,EAAYE,IAErCmB,EAAYhC,uBAAY,SAACgB,GAC3BA,EAAMY,iBACNhB,GAAc,GACdE,OAAiBmB,KAClB,IAEHlT,qBAAU,WACN,IAAMmT,EAAKrT,EAAUI,QACrB,GAAKiT,EAYL,OAVAA,EAAGC,iBAAiB,YAAaR,GACjCO,EAAGC,iBAAiB,YAAaL,GACjCI,EAAGC,iBAAiB,UAAWH,GAC/BE,EAAGC,iBAAiB,aAAcH,GAElCE,EAAGC,iBAAiB,aAAcR,GAClCO,EAAGC,iBAAiB,YAAaL,GACjCI,EAAGC,iBAAiB,WAAYH,GAChCE,EAAGC,iBAAiB,cAAeH,GAE5B,WACHE,EAAGE,oBAAoB,YAAaT,GACpCO,EAAGE,oBAAoB,YAAaN,GACpCI,EAAGE,oBAAoB,UAAWJ,GAClCE,EAAGE,oBAAoB,aAAcJ,GAErCE,EAAGE,oBAAoB,aAAcT,GACrCO,EAAGE,oBAAoB,YAAaN,GACpCI,EAAGE,oBAAoB,WAAYJ,GACnCE,EAAGE,oBAAoB,cAAeJ,MAE3C,CAACnT,EAAWmT,EAAWL,EAAaG,IDpHvCO,CAAQxT,EAAW,CAAE+Q,YAAa,QAASc,SAAU,QAASb,UAAW,IAGrE,mCACI,wBAAQnQ,IAAKb,EAAWc,MAAO4P,GAAO3P,OAAQ6P,OES3C6C,OAlBf,WACI,OACI,mCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhU,KAAK,IAAIE,OAAK,EAArB,SACI,cAACH,EAAD,MAEJ,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACI,cAAC8O,GAAD,MAEJ,cAAC,IAAD,CAAO9O,KAAK,QAAZ,SACI,cAACqR,GAAD,YCJL4C,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhG,MAAK,YAAkD,IAA/CiG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASpR,OACL,mCAEI,cAAC,GAAD,MAGJwN,SAAS6D,eAAe,SAM5BT,M,mBCnBAU,EAAOC,QAAU,CAAC,OAAS,gBAAgB,OAAS,kB,mBCApDD,EAAOC,QAAU,CAAC,OAAS,mB","file":"static/js/main.03408c0a.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\n\nexport default function Home() {\n    const { path } = useRouteMatch();\n\n    return (\n        <>\n            <Switch>\n                <Route exact path={path}>\n                    <Redirect to={`/demo`} />\n                </Route>\n            </Switch>\n        </>\n    );\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useCanvas<T = RenderingContext>(drawCallback: (ctx: T) => void, context: '2d' | 'webgl' = 'webgl') {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = (canvas?.getContext(context) as unknown) as T;\n        if (!ctx) return;\n\n        return drawCallback(ctx);\n    }, [context, drawCallback]);\n\n    return canvasRef;\n}\n","import React, { useRef, useEffect } from 'react';\n\nimport styles from './styles.module.less';\nimport { useCanvas } from '@/services/hooks/canvas';\n\n// 使用自定义 canvas hook\nexport default function HelloWorld() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(gl => {\n        gl.clearColor(0, 0, 0, 1); // 使用完全不透明的黑色清除所有图像\n        gl.clear(gl.COLOR_BUFFER_BIT); // 用上面指定的颜色清除缓冲区\n    });\n\n    return (\n        <>\n            <canvas ref={refCanvas} width=\"750\" height=\"1000\" className={styles.canvas} />\n        </>\n    );\n}\n\n// 普通使用方式\nexport function HelloWorld2() {\n    const refCanvas = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const canvas = refCanvas.current;\n        const gl = canvas?.getContext('webgl');\n        if (gl) {\n            gl.clearColor(0, 0, 0, 1); // 使用完全不透明的黑色清除所有图像\n            gl.clear(gl.COLOR_BUFFER_BIT); // 用上面指定的颜色清除缓冲区\n        }\n    });\n\n    return (\n        <>\n            <canvas ref={refCanvas} width=\"750\" height=\"1000\" className={styles.canvas} />\n        </>\n    );\n}\n","/**\n * 创建 shader\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} type\n * @param {string} source\n */\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string) {\n    // 创建 shader 对象\n    let shader = gl.createShader(type);\n    if (!shader) return;\n    // 往 shader 中传入源代码\n    gl.shaderSource(shader, source);\n    // 编译 shader\n    gl.compileShader(shader);\n    // 判断 shader 是否编译成功\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    // 如果编译失败，则打印错误信息\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\n/**\n * 创建 program\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLShader} vertexShader\n * @param {WebGLShader} fragmentShader\n */\nfunction createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    // 创建 program 对象\n    let program = gl.createProgram();\n    if (!program) return;\n    // 往 program 对象中传入 WebGLShader 对象\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    // 链接 program\n    gl.linkProgram(program);\n    // 判断 program 是否链接成功\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    // 如果 program 链接失败，则打印错误信息\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\n/**\n * 初始化Shader程序\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} vertexSource\n * @param {string} fragmentSource\n */\nexport function initWebGL(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\n    // 根据源代码创建顶点着色器\n    let vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexSource);\n    // 根据源代码创建片元着色器\n    let fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n    if (!vertexShader || !fragmentShader) return;\n    // 创建 WebGL Program 程序\n    let program = createProgram(gl, vertexShader, fragmentShader);\n    return program;\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function Point() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\n// 顶点着色器\nconst vertexShader = `\n    attribute vec4 a_position;\n    void main () {\n        // gl_Position 为内置变量，表示当前点的位置\n        gl_Position = a_position;\n        // gl_PointSize 为内置变量，表示当前点的大小，为浮点类型，如果赋值是整数类型会报错\n        gl_PointSize = 100.0;\n    }  \n`;\n// 片元着色器\nconst fragmentShader = `\n    // 设置浮点数精度\n    precision mediump float;\n    void main () {\n        // vec4 是表示四维向量，这里用来表示RGBA的值[0~1]，均为浮点数，如为整数则会报错\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n`;\n\nfunction render(gl: WebGLRenderingContext) {\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n    // 获取shader中a_position的地址\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    // 往a_position这个地址中传值\n    gl.vertexAttrib3f(a_position, 0.0, 0.0, 0.0);\n\n    // 开始绘制，绘制类型是gl.POINTS绘制点，0表示第一个点的索引，1表示共绘制几个点\n    gl.drawArrays(gl.POINTS, 0, 1);\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function TriangleBase() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\n// 顶点着色器\nconst vertexShader = `\n    attribute vec4 a_position;\n    void main () {\n        // gl_Position 为内置变量，表示当前点的位置\n        gl_Position = a_position;\n        // gl_PointSize 为内置变量，表示当前点的大小，为浮点类型，如果赋值是整数类型会报错\n        gl_PointSize = 10.0;\n    }  \n`;\n// 片元着色器\nconst fragmentShader = `\n    precision mediump float; // 设置浮点数精度\n    void main () {\n        // vec4 是表示四维向量，这里用来表示RGBA的值[0~1]，均为浮点数，如为整数则会报错\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n`;\n\nfunction render(gl: WebGLRenderingContext) {\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        -0.5, 0.0, \n        0.5, 0.5, \n        // 0.0, 0.5,\n    ];\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    const a_position = gl.getAttribLocation(program, 'a_position');\n\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    gl.drawArrays(gl.LINES, 0, 2);\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function TriangleBase() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\n// 顶点着色器\nconst vertexShader = `\n    attribute vec4 a_position;\n    void main () {\n        // gl_Position 为内置变量，表示当前点的位置\n        gl_Position = a_position;\n        // gl_PointSize 为内置变量，表示当前点的大小，为浮点类型，如果赋值是整数类型会报错\n        gl_PointSize = 10.0;\n    }  \n`;\n// 片元着色器\nconst fragmentShader = `\n    // 设置浮点数精度\n    precision mediump float;\n    void main () {\n        // vec4 是表示四维向量，这里用来表示RGBA的值[0~1]，均为浮点数，如为整数则会报错\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n`;\n\nfunction render(gl: WebGLRenderingContext) {\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        -0.5, 0.0, \n        0.5, 0.0, \n        0.0, 0.5,\n    ];\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 获取shader中a_position的地址\n    const a_position = gl.getAttribLocation(program, 'a_position');\n\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function TriangleColor() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    render1(gl);\n    render2(gl);\n}\n\nfunction render1(gl: WebGLRenderingContext) {\n    // 顶点着色器\n    const vertexShader = `\n        attribute vec4 a_position;\n        attribute vec4 a_color;\n        varying vec4 v_color; // 传递给 片元着色器\n        void main () {\n            gl_Position = a_position;\n            v_color = a_color;\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float;  // 设置浮点数精度\n        varying vec4 v_color; \n        void main () {\n            gl_FragColor = v_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        0.25, 0.0,  0.0, 0.0, 1.0, 1.0, // 顶点位置 + 颜色（RGBA）\n        1.0, 0.0,   0.0, 0.0, 1.0, 1.0,\n        0.0, 1.0,   0.0, 0.0, 1.0, 1.0,\n    ];\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 顶点位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 6, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    // 顶点颜色\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    gl.vertexAttribPointer(\n        a_color,\n        4,\n        gl.FLOAT,\n        false,\n        Float32Array.BYTES_PER_ELEMENT * 6,\n        Float32Array.BYTES_PER_ELEMENT * 2,\n    );\n    gl.enableVertexAttribArray(a_color);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n\nfunction render2(gl: WebGLRenderingContext) {\n    // 两个着色器：\n    // 需要a_color这个变量进行插值处理。\n    // 在片元着色器中必须定义一个相同名称的变量，这样在片元着色器中就可以直接使用插值后的值了。\n\n    // 顶点着色器\n    const vertexShader = `\n        attribute vec4 a_position;\n        attribute vec4 a_color;\n        varying vec4 v_color; // 传递给 片元着色器\n        void main () {\n            gl_Position = a_position;\n            v_color = a_color;\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float;  // 设置浮点数精度\n        varying vec4 v_color; \n        void main () {\n            gl_FragColor = v_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        -1.0, 0.0, \n        0.0, 0.0, \n        0.0, 0.5,\n    ];\n    /* prettier-ignore */\n    const colors = [\n        1.0, 0.0, 0.0, 1.0, \n        0.0, 1.0, 0.0, 1.0, \n        0.0, 0.0, 1.0, 1.0\n    ];\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    // 颜色缓冲\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    gl.vertexAttribPointer(a_color, 4, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 4, 0);\n    gl.enableVertexAttribArray(a_color);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n","import React from 'react';\n\nimport { initWebGL } from '@/utils/gl';\nimport { useCanvas } from '@/services/hooks/canvas';\n\nexport default function MultipleTriangle() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\n// 顶点着色器\nconst vertexShader = `\n    attribute vec4 a_position;\n    void main () {\n        // gl_Position 为内置变量，表示当前点的位置\n        gl_Position = a_position;\n        // gl_PointSize 为内置变量，表示当前点的大小，为浮点类型，如果赋值是整数类型会报错\n        gl_PointSize = 10.0;\n    }  \n`;\n// 片元着色器\nconst fragmentShader = `\n    precision mediump float;  // 设置浮点数精度\n    void main () {\n        // vec4 是表示四维向量，这里用来表示RGBA的值[0~1]，均为浮点数，如为整数则会报错\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n`;\n\nfunction render(gl: WebGLRenderingContext) {\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    const draw = (points: number[]) => {\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n        const a_position = gl.getAttribLocation(program, 'a_position');\n\n        gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n        gl.enableVertexAttribArray(a_position);\n\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n    };\n\n    /* prettier-ignore */\n    const points = [\n       -1, 1,\n       0, 1,\n       -1, -1,\n\n    //    1, 1,\n    //    0, -1,\n    //    1, -1\n    ];\n    draw(points);\n\n    // 绘制另一个三角形\n    /* prettier-ignore */\n    const anotherPoints = [\n        1, 1,\n        0, -1,\n        1, -1\n     ];\n    draw(anotherPoints);\n}\n","import React from 'react';\n\nimport PureTriangle from './Pure';\nimport GradientTriangle from './Gradient';\nimport MultipleTriangle from './Multiple';\n\n\nexport default function Triangle() {\n    return (\n        <>\n            <h2>纯色的三角形</h2>\n            <PureTriangle />\n            <h2>渐变颜色的三角形</h2>\n            <GradientTriangle />\n            <h2>多种的三角形</h2>\n            <MultipleTriangle />\n        </>\n    );\n}\n","/**\n * 加载图片\n *\n * @export\n * @param {string} urlOrBase64OrFile - 图片地址，可为图片地址、base64 或 File对象\n * @param {boolean} [crossOrigin=false] - 是否允许跨域，仅对于 URL 时有效\n */\nexport async function loadImage(\n    urlOrBase64OrFile: string | File,\n    crossOrigin: boolean = false,\n): Promise<HTMLImageElement> {\n    const getFile = async (file: File): Promise<string> =>\n        await new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = e => (e.target ? resolve(e.target.result as string) : reject(new Error(`empty`)));\n            reader.onerror = err => reject(err);\n            reader.readAsDataURL(file);\n        });\n    const src = typeof urlOrBase64OrFile === 'string' ? urlOrBase64OrFile : await getFile(urlOrBase64OrFile);\n\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        if (crossOrigin) {\n            image.crossOrigin = 'Anonymous';\n        }\n        image.src = src;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n    });\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { useImage } from '@/services/hooks/image';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function ImageTexture() {\n    const image = useImage(`https://elements.stoumann.dk/assets/img/filter01.jpg`);\n    const refCanvas = useCanvas<WebGLRenderingContext>(gl => image && render(gl, image));\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\n// 顶点着色器\nconst vertexShader = `\n    attribute vec4 a_position; // 通过 js 传递顶点坐标\n    attribute vec2 a_texCoord; // 通过 js 传递纹理坐标\n    varying vec2 v_texCoord; // 传递纹理坐标给 片元着色器\n    void main () {\n        gl_Position = a_position;\n        gl_PointSize = 10.0;\n        v_texCoord = a_texCoord;\n    }  \n`;\n// 片元着色器\nconst fragmentShader = `\n    precision mediump float;\n    varying vec2 v_texCoord; // 接受顶点着色器传来的纹理坐标\n    uniform sampler2D u_texture; // 声明一个uniform变量来保存纹理\n    void main () {\n        gl_FragColor = texture2D(u_texture, v_texCoord); // 使用内建的texture2D函数进行采样，获取纹素颜色\n    }\n`;\n\nasync function render(gl: WebGLRenderingContext, image: HTMLImageElement) {\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        -1, 1,\n        1, 1,\n        -1, -1,\n        1, 1,\n        -1, -1,\n        1, -1\n    ];\n    /* prettier-ignore */\n    const texCoords = [\n        0, 1,\n        1, 1,\n        0, 0,\n        1, 1,\n        0, 0,\n        1, 0\n    ];\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 获取shader中 a_position 的地址\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texCoords), gl.STATIC_DRAW);\n    // 获取shader中 a_texCoord 的地址\n    const a_texCoord = gl.getAttribLocation(program, 'a_texCoord');\n    gl.vertexAttribPointer(a_texCoord, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_texCoord);\n\n    // 纹理缓存\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // 设置参数，让我们可以绘制任何尺寸的图像\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // 反转 Y 轴进行:纹理图片与canvas坐标 Y 轴相反\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n","import { useState, useEffect } from 'react';\n\nimport { loadImage } from '@/utils';\n\nexport function useImage(url: Parameters<typeof loadImage>[0], crossOrigin: Parameters<typeof loadImage>[1] = true) {\n    const [image, setImage] = useState<HTMLImageElement>();\n    useEffect(() => {\n        (async () => {\n            const image = await loadImage(url, crossOrigin);\n            setImage(() => image);\n        })();\n    }, [crossOrigin, url]);\n    return image;\n}\n","import React from 'react';\n\nimport ImageTexture from './Image';\n\nexport default function Texture() {\n    return (\n        <>\n            <h2>图片纹理</h2>\n            <ImageTexture />\n        </>\n    );\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function TriangleBase() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawByCanvasCoordinate(gl);\n    drawColorTriangle(gl);\n    drawGradientColorTriangle(gl);\n}\n\n/**\n * 使用屏幕坐标绘制\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawByCanvasCoordinate(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n\n            // gl_Position = vec4(clipSpace, 0, 1); // 左下角为原点，翻转Y轴等到以下\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        void main () {\n            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n\n    /* prettier-ignore */\n    const points = [\n        0, 0,\n        0, 200,\n        200, 200,\n    ]; // 屏幕像素坐标\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n\n/**\n * 绘制渐变颜色的三角形\n *\n * @param {WebGLRenderingContext} gl\n */\nfunction drawGradientColorTriangle(gl: WebGLRenderingContext) {\n    // 顶点着色器\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        attribute vec4 a_color; // js 传递变量\n        varying vec4 v_color; // 传递给 片元着色器\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n\n            v_color = a_color;\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        varying vec4 v_color;  // 顶点着色器传来的值\n        void main () {\n            gl_FragColor = v_color;\n        }\n    `;\n\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n\n    /* prettier-ignore */\n    const points = [\n        0, 0,\n        200, 0,\n        200, 200,\n    ]; // 屏幕像素坐标\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    /* prettier-ignore */\n    const colors = [\n        1.0, 0.0, 0.0, 1.0, \n        0.0, 1.0, 0.0, 1.0, \n        0.0, 0.0, 1.0, 1.0\n    ];\n    // 颜色缓冲\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    gl.vertexAttribPointer(a_color, 4, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 4, 0);\n    gl.enableVertexAttribArray(a_color);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n\n/**\n * 绘制纯颜色的三角形\n *\n * @param {WebGLRenderingContext} gl\n */\nfunction drawColorTriangle(gl: WebGLRenderingContext) {\n    // 顶点着色器\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n\n    /* prettier-ignore */\n    const points = [\n        0, 400,\n        750, 0,\n        750, 1000,\n    ]; // 屏幕像素坐标\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    // 颜色\n    const colorUniformLocation = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(colorUniformLocation, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n","/* prettier-ignore */\ntype M3x3 = [\n    number, number, number,\n    number, number, number,\n    number, number, number,\n];\n\nexport const m3 = {\n    /**\n     * 单位矩阵\n     */\n    identity() {\n        /* prettier-ignore */\n        return [\n            1, 0, 0,\n            0, 1, 0,\n            0, 0, 1,\n        ] as M3x3;\n    },\n    projection: function (width: number, height: number) {\n        /* prettier-ignore */\n        // Note: This matrix flips the Y axis so that 0 is at the top.\n        return [\n          2 / width, 0, 0,\n          0, -2 / height, 0,\n          -1, 1, 1\n        ] as M3x3;\n    },\n    translation(tx: number, ty: number) {\n        /* prettier-ignore */\n        return [\n            1, 0, 0,\n            0, 1, 0,\n            tx, ty, 1,\n        ] as M3x3;\n    },\n    rotation(angle: number) {\n        const c = Math.cos(angle),\n            s = Math.sin(angle);\n        /* prettier-ignore */\n        return [\n            c,-s, 0,\n            s, c, 0,\n            0, 0, 1,\n        ] as M3x3;\n    },\n    scaling(sx: number, sy: number) {\n        /* prettier-ignore */\n        return [\n            sx, 0, 0,\n            0, sy, 0,\n            0, 0, 1,\n        ] as M3x3;\n    },\n    multiply(a: M3x3, b: M3x3) {\n        const a00 = a[0 * 3 + 0],\n            a01 = a[0 * 3 + 1],\n            a02 = a[0 * 3 + 2],\n            a10 = a[1 * 3 + 0],\n            a11 = a[1 * 3 + 1],\n            a12 = a[1 * 3 + 2],\n            a20 = a[2 * 3 + 0],\n            a21 = a[2 * 3 + 1],\n            a22 = a[2 * 3 + 2];\n\n        const b00 = b[0 * 3 + 0],\n            b01 = b[0 * 3 + 1],\n            b02 = b[0 * 3 + 2],\n            b10 = b[1 * 3 + 0],\n            b11 = b[1 * 3 + 1],\n            b12 = b[1 * 3 + 2],\n            b20 = b[2 * 3 + 0],\n            b21 = b[2 * 3 + 1],\n            b22 = b[2 * 3 + 2];\n\n        return [\n            b00 * a00 + b01 * a10 + b02 * a20,\n            b00 * a01 + b01 * a11 + b02 * a21,\n            b00 * a02 + b01 * a12 + b02 * a22,\n\n            b10 * a00 + b11 * a10 + b12 * a20,\n            b10 * a01 + b11 * a11 + b12 * a21,\n            b10 * a02 + b11 * a12 + b12 * a22,\n\n            b20 * a00 + b21 * a10 + b22 * a20,\n            b20 * a01 + b21 * a11 + b22 * a21,\n            b20 * a02 + b21 * a12 + b22 * a22,\n        ] as M3x3;\n    },\n};\n\n/* prettier-ignore */\ntype M4x4 = [\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n];\n\nexport const m4 = {\n    /**\n     * 单位矩阵\n     */\n    identity() {\n        /* prettier-ignore */\n        return [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ] as M4x4;\n    },\n    projection(width: number, height: number, depth: number) {\n        /* prettier-ignore */\n        // Note: This matrix flips the Y axis so 0 is at the top.\n        return [\n            2 / width, 0, 0, 0,\n            0, -2 / height, 0, 0,\n            0, 0, 2 / depth, 0,\n           -1, 1, 0, 1,\n        ] as M4x4;\n    },\n    translation(tx: number, ty: number, tz: number) {\n        /* prettier-ignore */\n        return [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ] as M4x4;\n    },\n    rotationX(angle: number) {\n        const c = Math.cos(angle),\n            s = Math.sin(angle);\n        /* prettier-ignore */\n        return [\n            1, 0, 0, 0,\n            0, c, s, 0,\n            0, -s, c, 0,\n            0, 0, 0, 1,\n        ] as M4x4;\n    },\n    rotationY(angle: number) {\n        const c = Math.cos(angle),\n            s = Math.sin(angle);\n        /* prettier-ignore */\n        return [\n            c, 0, -s, 0,\n            0, 1, 0, 0,\n            s, 0, c, 0,\n            0, 0, 0, 1,\n        ] as M4x4;\n    },\n    rotationZ(angle: number) {\n        const c = Math.cos(angle),\n            s = Math.sin(angle);\n        /* prettier-ignore */\n        return [\n            c, s, 0, 0,\n            -s, c, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ] as M4x4;\n    },\n    scaling(sx: number, sy: number, sz: number) {\n        /* prettier-ignore */\n        return [\n            sx, 0,  0,  0,\n            0, sy,  0,  0,\n            0,  0, sz,  0,\n            0,  0,  0,  1,\n        ] as M4x4;\n    },\n    multiply(a: M4x4, b: M4x4) {\n        const a00 = a[0 * 4 + 0],\n            a01 = a[0 * 4 + 1],\n            a02 = a[0 * 4 + 2],\n            a03 = a[0 * 4 + 3],\n            a10 = a[1 * 4 + 0],\n            a11 = a[1 * 4 + 1],\n            a12 = a[1 * 4 + 2],\n            a13 = a[1 * 4 + 3],\n            a20 = a[2 * 4 + 0],\n            a21 = a[2 * 4 + 1],\n            a22 = a[2 * 4 + 2],\n            a23 = a[2 * 4 + 3],\n            a30 = a[3 * 4 + 0],\n            a31 = a[3 * 4 + 1],\n            a32 = a[3 * 4 + 2],\n            a33 = a[3 * 4 + 3];\n\n        const b00 = b[0 * 4 + 0],\n            b01 = b[0 * 4 + 1],\n            b02 = b[0 * 4 + 2],\n            b03 = b[0 * 4 + 3],\n            b10 = b[1 * 4 + 0],\n            b11 = b[1 * 4 + 1],\n            b12 = b[1 * 4 + 2],\n            b13 = b[1 * 4 + 3],\n            b20 = b[2 * 4 + 0],\n            b21 = b[2 * 4 + 1],\n            b22 = b[2 * 4 + 2],\n            b23 = b[2 * 4 + 3],\n            b30 = b[3 * 4 + 0],\n            b31 = b[3 * 4 + 1],\n            b32 = b[3 * 4 + 2],\n            b33 = b[3 * 4 + 3];\n        return [\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n        ] as M4x4;\n    },\n};\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\nimport { m3 } from '@/utils/matrix';\n\nexport default function MatrixCoordinate() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"750\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    // 顶点着色器\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform mat3 u_matrix;\n        void main () {\n            gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    const points = [\n        0, 400,\n        750, 0,\n        750, 1000,\n    ]; // 屏幕像素坐标\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    // 颜色\n    const colorUniformLocation = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(colorUniformLocation, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    // 矩阵\n    var translation = [0, 0],\n        angleInRadians = 0,\n        scale = [1, 1];\n    const translationMatrix = m3.translation(translation[0], translation[1]);\n    const rotationMatrix = m3.rotation(angleInRadians);\n    const scaleMatrix = m3.scaling(scale[0], scale[1]);\n    // 根据分辨率生成矩阵\n    const projectionMatrix = m3.projection(gl.canvas.width, gl.canvas.height);\n\n    let matrix = m3.identity(); // 初始矩阵\n    matrix = m3.multiply(projectionMatrix, translationMatrix);\n    matrix = m3.multiply(matrix, rotationMatrix);\n    matrix = m3.multiply(matrix, scaleMatrix);\n\n    const u_matrix = gl.getUniformLocation(program, 'u_matrix');\n    gl.uniformMatrix3fv(u_matrix, false, matrix);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n}\n","import React from 'react';\n\nimport TriangleBase from './Triangle';\nimport Matrix from './Matrix';\n\nexport default function Triangle() {\n    return (\n        <>\n            <h2>三角形：使用屏幕像素坐标</h2>\n            <TriangleBase />\n            <h2>矩阵转化方式：使用屏幕像素坐标</h2>\n            <Matrix />\n        </>\n    );\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function Translation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"1000\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawNormalF(gl);\n    drawTranslateF(gl);\n}\n\n/**\n * 绘制正常的F\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawNormalF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n\n            // gl_Position = vec4(clipSpace, 0, 1); // 左下角为原点，翻转Y轴等到以下\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 18);\n}\n\nfunction drawTranslateF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：接收自定义画布的分辨率\n        uniform vec2 u_translation; // 设置全局变量：接收自定义的平移\n        void main () {\n            vec2 position = a_position + u_translation; // 加上平移量\n\n            vec2 clipSpace =  (position / u_resolution) * 2.0 - 1.0;\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    // gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n    gl.uniform4fv(u_color, [Math.random(), Math.random(), Math.random(), 1]);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    //------------------------------------------\n    // 平移F\n    (() => {\n        const translation = [400, 400];\n        const u_translation = gl.getUniformLocation(program, 'u_translation');\n        // 设置平移\n        gl.uniform2fv(u_translation, translation);\n        gl.drawArrays(gl.TRIANGLES, 0, 18);\n    })();\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function Rotation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"1000\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawNormalF(gl);\n    drawRotationF(gl);\n}\n\n/**\n * 绘制正常的F\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawNormalF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n\n            // gl_Position = vec4(clipSpace, 0, 1); // 左下角为原点，翻转Y轴等到以下\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 18);\n}\n\nfunction drawRotationF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：接收自定义画布的分辨率\n        uniform vec2 u_translation; // 设置全局变量：接收自定义的平移\n        uniform vec2 u_rotation; // 设置全局变量：接收自定义的旋转角度\n        void main () {\n            // 旋转位置\n            vec2 rotatedPosition = vec2(\n                a_position.x * u_rotation.y + a_position.y * u_rotation.x,\n                a_position.y * u_rotation.y - a_position.x * u_rotation.x);\n\n            // 加上平移量\n            vec2 position = rotatedPosition + u_translation; \n\n            vec2 clipSpace =  (position / u_resolution) * 2.0 - 1.0;\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    // gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n    gl.uniform4fv(u_color, [Math.random(), Math.random(), Math.random(), 1]);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    //------------------------------------------\n    // 平移F\n    (() => {\n        const translation = [400, 400],\n            rotation = [-0.5, 1]; // -1, 1\n        const u_translation = gl.getUniformLocation(program, 'u_translation');\n        const u_rotation = gl.getUniformLocation(program, 'u_rotation');\n\n        gl.uniform2fv(u_translation, translation); // 设置平移\n        gl.uniform2fv(u_rotation, rotation); // 设置旋转\n        gl.drawArrays(gl.TRIANGLES, 0, 18);\n    })();\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\n\nexport default function Scaling() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"1000\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawNormalF(gl);\n    drawScalingF(gl);\n}\n\n/**\n * 绘制正常的F\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawNormalF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 zeroToOne = a_position / u_resolution; // 从像素坐标转换到 0.0 到 1.0\n            vec2 zeroToTwo = zeroToOne * 2.0; // 再把 0->1 转换 0->2\n            vec2 clipSpace = zeroToTwo - 1.0; // 把 0->2 转换到 -1->+1 (裁剪空间)\n\n            // gl_Position = vec4(clipSpace, 0, 1); // 左下角为原点，翻转Y轴等到以下\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 18);\n}\n\nfunction drawScalingF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：接收自定义画布的分辨率\n        uniform vec2 u_translation; // 设置全局变量：接收自定义的平移\n        uniform vec2 u_rotation; // 设置全局变量：接收自定义的旋转角度\n        uniform vec2 u_scale; // 设置全局变量：接收自定义的缩放\n        void main () {\n            // 缩放\n            vec2 scaledPosition = a_position * u_scale;\n            // 旋转位置\n            vec2 rotatedPosition = vec2(\n                scaledPosition.x * u_rotation.y + scaledPosition.y * u_rotation.x,\n                scaledPosition.y * u_rotation.y - scaledPosition.x * u_rotation.x);\n\n            // 加上平移量\n            vec2 position = rotatedPosition + u_translation; \n\n            vec2 clipSpace =  (position / u_resolution) * 2.0 - 1.0;\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    // gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n    gl.uniform4fv(u_color, [Math.random(), Math.random(), Math.random(), 1]);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    //------------------------------------------\n    // 平移F\n    (() => {\n        const translation = [400, 400],\n            rotation = [-0.5, 1], // -1, 1\n            scale = [3, 3];\n        const u_translation = gl.getUniformLocation(program, 'u_translation');\n        const u_rotation = gl.getUniformLocation(program, 'u_rotation');\n        const u_scale = gl.getUniformLocation(program, 'u_scale');\n\n        gl.uniform2fv(u_translation, translation); // 设置平移\n        gl.uniform2fv(u_rotation, rotation); // 设置旋转\n        gl.uniform2fv(u_scale, scale); // 设置旋转\n        gl.drawArrays(gl.TRIANGLES, 0, 18);\n    })();\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\nimport { m3 } from '@/utils/matrix';\n\nexport default function Translation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"1000\" height=\"1000\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawNormalF(gl);\n    drawTranslateF(gl);\n}\n\n/**\n * 绘制正常的F\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawNormalF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：画布的分辨率\n        void main () {\n            vec2 clipSpace =  (a_position / u_resolution) * 2.0 - 1.0;\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 18);\n}\n\nfunction drawTranslateF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec2 a_position;\n        uniform vec2 u_resolution; // 设置全局变量：接收自定义画布的分辨率\n        uniform mat3 u_matrix; // 设置全局变量：接收自定义公矩阵\n        void main () {\n            vec2 position = (u_matrix * vec3(a_position, 1)).xy; // 将位置乘以矩阵\n\n            vec2 clipSpace =  (position / u_resolution) * 2.0 - 1.0;\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // 左上角为原点\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        uniform vec4 u_color; // 通过全局变量接收自定义颜色\n        void main () {\n            gl_FragColor = u_color;\n        }\n    `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    gl.useProgram(program);\n\n    // gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // 分辨率\n    const u_resolution = gl.getUniformLocation(program, 'u_resolution'); // 画布的分辨率变量的地址\n    gl.uniform2f(u_resolution, gl.canvas.width, gl.canvas.height); // 设置全局变量 分辨率\n    // 颜色\n    const u_color = gl.getUniformLocation(program, 'u_color');\n    // gl.uniform4f(u_color, 45 / 255, 45 / 255, 170 / 255, 1);\n    gl.uniform4fv(u_color, [Math.random(), Math.random(), Math.random(), 1]);\n\n    /* prettier-ignore */\n    const points = [\n        // left column\n        0, 0,\n        30, 0,\n        0, 150,\n        0, 150,\n        30, 0,\n        30, 150,\n        // top rung\n        30, 0,\n        100, 0,\n        30, 30,\n        30, 30,\n        100, 0,\n        100, 30,\n        // middle rung\n        30, 60,\n        67, 60,\n        30, 90,\n        30, 90,\n        67, 60,\n        67, 90,\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, Float32Array.BYTES_PER_ELEMENT * 2, 0);\n    gl.enableVertexAttribArray(a_position);\n\n    //------------------------------------------\n    // 平移F\n    (() => {\n        const translation = [500, 150],\n            angle = 0,\n            scale = [1, 1];\n        // 计算矩阵\n        const translationMatrix = m3.translation(translation[0], translation[1]),\n            rotationMatrix = m3.rotation(angle),\n            scaleMatrix = m3.scaling(scale[0], scale[1]);\n        // 矩阵相乘\n        let matrix = m3.multiply(translationMatrix, rotationMatrix);\n        matrix = m3.multiply(matrix, scaleMatrix);\n        // 设置矩阵\n        const u_matrix = gl.getUniformLocation(program, 'u_matrix');\n        gl.uniformMatrix3fv(u_matrix, false, matrix);\n\n        // 绘制\n        gl.drawArrays(gl.TRIANGLES, 0, 18);\n    })();\n\n    //------------------------------------------\n    // 多次平移F\n    (() => {\n        const translation = [100, 150],\n            angle = 0,\n            scale = [1, 1];\n        // 计算矩阵\n        const translationMatrix = m3.translation(translation[0], translation[1]),\n            rotationMatrix = m3.rotation(angle),\n            scaleMatrix = m3.scaling(scale[0], scale[1]);\n\n        let matrix = m3.identity(); // 初始矩阵\n\n        const u_matrix = gl.getUniformLocation(program as WebGLProgram, 'u_matrix');\n        for (let i = 0; i < 4; i++) {\n            matrix = m3.multiply(matrix, translationMatrix);\n            matrix = m3.multiply(matrix, rotationMatrix);\n            matrix = m3.multiply(matrix, scaleMatrix);\n            // 设置颜色\n            gl.uniform4fv(u_color, [Math.random(), Math.random(), Math.random(), 1]);\n            // 设置矩阵\n            gl.uniformMatrix3fv(u_matrix, false, matrix);\n            // 绘制\n            gl.drawArrays(gl.TRIANGLES, 0, 18);\n        }\n    })();\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\nimport { m4 } from '@/utils/matrix';\n\nexport default function Translation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"500\" height=\"500\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    drawNormalF(gl);\n    // drawTranslateF(gl);\n}\n\n/**\n * 绘制正常的F\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawNormalF(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n        attribute vec4 a_position;\n        uniform mat4 u_matrix;\n        attribute vec4 a_color;\n        varying vec4 v_color;\n        void main () {\n            gl_Position = u_matrix * a_position;\n            \n            v_color = a_color; // 将颜色传递给片断着色器\n        }  \n    `;\n    // 片元着色器\n    const fragmentShader = `\n        precision mediump float; // 设置浮点数精度\n        \n        varying vec4 v_color; // 从顶点着色器中传入\n        void main () {\n            gl_FragColor = v_color;\n        }\n    `;\n\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // 清空画布和深度缓冲\n    gl.enable(gl.DEPTH_TEST); //  Enable the depth buffer\n\n    gl.useProgram(program);\n\n    /* prettier-ignore */\n    // 16 个矩形\n    const points = [\n        // left column front\n        0,   0,  0,\n        0, 150,  0,\n        30,   0,  0,\n        0, 150,  0,\n        30, 150,  0,\n        30,   0,  0,\n\n        // top rung front\n        30,   0,  0,\n        30,  30,  0,\n        100,   0,  0,\n        30,  30,  0,\n        100,  30,  0,\n        100,   0,  0,\n\n        // middle rung front\n        30,  60,  0,\n        30,  90,  0,\n        67,  60,  0,\n        30,  90,  0,\n        67,  90,  0,\n        67,  60,  0,\n\n        // left column back\n        0,   0,  30,\n        30,   0,  30,\n        0, 150,  30,\n        0, 150,  30,\n        30,   0,  30,\n        30, 150,  30,\n\n        // top rung back\n        30,   0,  30,\n        100,   0,  30,\n        30,  30,  30,\n        30,  30,  30,\n        100,   0,  30,\n        100,  30,  30,\n\n        // middle rung back\n        30,  60,  30,\n        67,  60,  30,\n        30,  90,  30,\n        30,  90,  30,\n        67,  60,  30,\n        67,  90,  30,\n\n        // top\n        0,   0,   0,\n        100,   0,   0,\n        100,   0,  30,\n        0,   0,   0,\n        100,   0,  30,\n        0,   0,  30,\n\n        // top rung right\n        100,   0,   0,\n        100,  30,   0,\n        100,  30,  30,\n        100,   0,   0,\n        100,  30,  30,\n        100,   0,  30,\n\n        // under top rung\n        30,   30,   0,\n        30,   30,  30,\n        100,  30,  30,\n        30,   30,   0,\n        100,  30,  30,\n        100,  30,   0,\n\n        // between top rung and middle\n        30,   30,   0,\n        30,   60,  30,\n        30,   30,  30,\n        30,   30,   0,\n        30,   60,   0,\n        30,   60,  30,\n\n        // top of middle rung\n        30,   60,   0,\n        67,   60,  30,\n        30,   60,  30,\n        30,   60,   0,\n        67,   60,   0,\n        67,   60,  30,\n\n        // right of middle rung\n        67,   60,   0,\n        67,   90,  30,\n        67,   60,  30,\n        67,   60,   0,\n        67,   90,   0,\n        67,   90,  30,\n\n        // bottom of middle rung.\n        30,   90,   0,\n        30,   90,  30,\n        67,   90,  30,\n        30,   90,   0,\n        67,   90,  30,\n        67,   90,   0,\n\n        // right of bottom\n        30,   90,   0,\n        30,  150,  30,\n        30,   90,  30,\n        30,   90,   0,\n        30,  150,   0,\n        30,  150,  30,\n\n        // bottom\n        0,   150,   0,\n        0,   150,  30,\n        30,  150,  30,\n        0,   150,   0,\n        30,  150,  30,\n        30,  150,   0,\n\n        // left side\n        0,   0,   0,\n        0,   0,  30,\n        0, 150,  30,\n        0,   0,   0,\n        0, 150,  30,\n        0, 150,   0\n    ];\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    gl.enableVertexAttribArray(a_position);\n    gl.vertexAttribPointer(a_position, 3, gl.FLOAT, false, 0, 0);\n\n    /* prettier-ignore */\n    // 颜色\n    const colors = [\n        // left column front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // top rung front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // middle rung front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // left column back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // top rung back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // middle rung back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // top\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n\n        // top rung right\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n\n        // under top rung\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n\n        // between top rung and middle\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n\n        // top of middle rung\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n\n        // right of middle rung\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n\n        // bottom of middle rung.\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n\n        // right of bottom\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n\n        // bottom\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n\n        // left side\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220\n    ];\n\n    // 颜色缓冲\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(colors), gl.STATIC_DRAW);\n\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    gl.vertexAttribPointer(a_color, 3, gl.UNSIGNED_BYTE, true, 0, 0);\n    gl.enableVertexAttribArray(a_color);\n\n    function degToRad(d: number) {\n        return (d * Math.PI) / 180;\n    }\n    // 矩阵\n    var translation = [50, 150, 0],\n        rotation = [degToRad(40), degToRad(30), degToRad(325)],\n        scale = [1, 1, 1];\n    const translationMatrix = m4.translation(translation[0], translation[1], translation[2]);\n    const rotationXMatrix = m4.rotationX(rotation[0]);\n    const rotationYMatrix = m4.rotationY(rotation[1]);\n    const rotationZMatrix = m4.rotationZ(rotation[2]);\n    const scaleMatrix = m4.scaling(scale[0], scale[1], scale[2]);\n    // 根据分辨率生成矩阵\n    const projectionMatrix = m4.projection(gl.canvas.width, gl.canvas.height, 100);\n\n    let matrix = m4.identity(); // 初始矩阵\n    matrix = m4.multiply(projectionMatrix, translationMatrix);\n    matrix = m4.multiply(matrix, rotationXMatrix);\n    matrix = m4.multiply(matrix, rotationYMatrix);\n    matrix = m4.multiply(matrix, rotationZMatrix);\n    matrix = m4.multiply(matrix, scaleMatrix);\n\n    const u_matrix = gl.getUniformLocation(program, 'u_matrix');\n    gl.uniformMatrix4fv(u_matrix, false, matrix);\n\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 16 * 6);\n}\n","import React from 'react';\n\nimport Translation from './Translation';\nimport Rotation from './Rotation';\nimport Scaling from './Scale';\nimport Matrix from './Matrix';\nimport Matrix3D from './Matrix3D';\n\nexport default function Texture() {\n    return (\n        <>\n            <h2>平移</h2>\n            <Translation />\n            <h2>平移+旋转</h2>\n            <Rotation />\n            <h2>平移+旋转+缩放</h2>\n            <Scaling />\n            <h2>矩阵</h2>\n            <Matrix />\n            <h2>3D 矩阵</h2>\n            <Matrix3D />\n        </>\n    );\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\nimport { m4 } from '@/utils/matrix';\n\nexport default function Translation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"500\" height=\"500\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n     attribute vec4 a_position;\n     uniform mat4 u_matrix;\n     attribute vec4 a_color;\n     varying vec4 v_color;\n     void main () {\n         gl_Position = u_matrix * a_position;\n         \n         v_color = a_color; // 将颜色传递给片断着色器\n     }  \n `;\n    // 片元着色器\n    const fragmentShader = `\n     precision mediump float; // 设置浮点数精度\n     \n     varying vec4 v_color; // 从顶点着色器中传入\n     void main () {\n         gl_FragColor = v_color;\n     }\n `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // 清空画布和深度缓冲\n    gl.enable(gl.DEPTH_TEST); //  Enable the depth buffer\n\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    set3DModel(gl, a_position);\n\n    // 颜色\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    setColor(gl, a_color);\n\n    function degToRad(d: number) {\n        return (d * Math.PI) / 180;\n    }\n\n    // Draw the scene.\n    const options = {\n        translation: [200, 200, 0],\n        rotation: [degToRad(50), degToRad(50), degToRad(20)],\n        scale: [1, 1, 1],\n    } as {\n        translation: [number, number, number];\n        rotation: [number, number, number];\n        scale: [number, number, number];\n    };\n    const u_matrix = gl.getUniformLocation(program, 'u_matrix');\n\n    let then = 0,\n        rafId = 0;\n    const draw = function draw(now: number) {\n        now *= 0.001;\n        const deltaTime = now - then;\n        then = now;\n\n        options.rotation[1] += 1.2 * deltaTime;\n\n        drawMatrix(gl, u_matrix, options);\n\n        rafId = requestAnimationFrame(draw);\n    };\n\n    draw(0);\n\n    // TODO :clear for useEffect\n    return () => cancelAnimationFrame(rafId);\n}\n\n/**\n * 绘制\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawMatrix(\n    gl: WebGLRenderingContext,\n    u_matrix: WebGLUniformLocation | null,\n    options: {\n        translation: [number, number, number];\n        rotation: [number, number, number];\n        scale: [number, number, number];\n    } = {\n        translation: [0, 0, 0],\n        rotation: [0, 0, 0],\n        scale: [1, 1, 1],\n    },\n) {\n    const { translation, rotation, scale } = options;\n    // 矩阵\n\n    const translationMatrix = m4.translation(translation[0], translation[1], translation[2]);\n    const rotationXMatrix = m4.rotationX(rotation[0]);\n    const rotationYMatrix = m4.rotationY(rotation[1]);\n    const rotationZMatrix = m4.rotationZ(rotation[2]);\n    const scaleMatrix = m4.scaling(scale[0], scale[1], scale[2]);\n    // 根据分辨率生成矩阵\n    const projectionMatrix = m4.projection(gl.canvas.width, gl.canvas.height, 400);\n\n    let matrix = m4.identity(); // 初始矩阵\n    matrix = m4.multiply(projectionMatrix, translationMatrix);\n    matrix = m4.multiply(matrix, rotationXMatrix);\n    matrix = m4.multiply(matrix, rotationYMatrix);\n    matrix = m4.multiply(matrix, rotationZMatrix);\n    matrix = m4.multiply(matrix, scaleMatrix);\n\n    // 中心\n    matrix = m4.multiply(matrix, m4.translation(-50, -50, 50));\n\n    gl.uniformMatrix4fv(u_matrix, false, matrix);\n\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 6 * 6);\n}\n\n/**\n * 如下立方体示例图\n *\n *        H ---------- G\n *       /|          / |\n *      / |         /  |\n *    D --|-------- C  |\n *    |   E --------|- F\n *    |  /          |  /\n *    | /           | /\n *    |/            |/\n *    A ----------- B\n *\n *  A(0, 0, 0)\n *  B(100, 0, 0)\n *  C(100, 100, 0)\n *  D(0, 100, 0)\n *  E(0, 0, -100)\n *  F(100, 0, -100)\n *  G(100, 100, -100)\n *  H(0, 100, -100)\n */\nfunction set3DModel(gl: WebGLRenderingContext, a_position: number) {\n    /* prettier-ignore */\n    // 6 个矩形\n    const points = [\n        // abcd\n        0, 0, 0,\n        100, 0, 0,\n        100, 100, 0,\n        100, 100, 0,\n        0, 0, 0,\n        0, 100, 0,\n        // abfe\n        0, 0, 0,\n        100, 0, 0,\n        100, 0, -100,\n        100, 0, -100,\n        0, 0, 0,\n        0, 0, -100,\n        // adhe\n        0, 0, 0,\n        0, 100, 0,\n        0, 100, -100,\n        0, 0, -100,\n        0, 100, -100,\n        0, 0, 0,\n        //gcdh\n        100, 100, -100,\n        100, 100, 0,\n        0, 100, 0,\n        0, 100, -100,\n        0, 100, 0,\n        100, 100, -100,\n        //ghef\n        100, 100, -100,\n        0, 100, -100,\n        0, 0, -100,\n        100, 0, -100,\n        0, 0, -100,\n        100, 100, -100,\n        //gcbf\n        100, 100, -100,\n        100, 100, 0,\n        100, 0, 0,\n        100, 0, -100,\n        100, 0, 0,\n        100, 100, -100,\n    ];\n\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    gl.enableVertexAttribArray(a_position);\n    gl.vertexAttribPointer(a_position, 3, gl.FLOAT, false, 0, 0);\n}\n\nfunction setColor(gl: WebGLRenderingContext, a_color: number) {\n    /* prettier-ignore */\n    // 颜色\n    const colors = [\n    \n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        200,  120, 120,\n        200,  120, 120,\n        200,  120, 120,\n        200,  120, 120,\n        200,  120, 120,\n        200,  120, 120,\n\n        0,  0, 0,\n        0,  0, 0,\n        0,  0, 0,\n        0,  0, 0,\n        0,  0, 0,\n        0,  0, 0,\n\n        80, 160, 200,\n        80, 160, 200,\n        80, 160, 200,\n        80, 160, 200,\n        80, 160, 200,\n        80, 160, 200,\n\n        180, 70, 200,\n        180, 70, 200,\n        180, 70, 200,\n        180, 70, 200,\n        180, 70, 200,\n        180, 70, 200,\n\n       100,  70, 120,\n       100,  70, 120,\n       100,  70, 120,\n       100,  70, 120,\n       100,  70, 120,\n       100,  70, 120,\n\n    ];\n\n    // 颜色缓冲\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(colors), gl.STATIC_DRAW);\n\n    gl.vertexAttribPointer(a_color, 3, gl.UNSIGNED_BYTE, true, 0, 0);\n    gl.enableVertexAttribArray(a_color);\n}\n","import React from 'react';\n\nimport { useCanvas } from '@/services/hooks/canvas';\nimport { initWebGL } from '@/utils/gl';\nimport { m4 } from '@/utils/matrix';\n\nexport default function Translation() {\n    const refCanvas = useCanvas<WebGLRenderingContext>(render);\n    return <canvas ref={refCanvas} width=\"500\" height=\"500\" />;\n}\n\nfunction render(gl: WebGLRenderingContext) {\n    // 顶点着色器: 带有坐标转换（屏幕像素坐标 => 裁剪空间坐标）\n    const vertexShader = `\n     attribute vec4 a_position;\n     uniform mat4 u_matrix;\n     attribute vec4 a_color;\n     varying vec4 v_color;\n     void main () {\n         gl_Position = u_matrix * a_position;\n         \n         v_color = a_color; // 将颜色传递给片断着色器\n     }  \n `;\n    // 片元着色器\n    const fragmentShader = `\n     precision mediump float; // 设置浮点数精度\n     \n     varying vec4 v_color; // 从顶点着色器中传入\n     void main () {\n         gl_FragColor = v_color;\n     }\n `;\n    // 初始化shader程序\n    const program = initWebGL(gl, vertexShader, fragmentShader);\n    if (!program) return;\n    // 告诉WebGL使用我们刚刚初始化的这个程序\n    gl.useProgram(program);\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // 清空画布和深度缓冲\n    gl.enable(gl.DEPTH_TEST); //  Enable the depth buffer\n\n    // 位置\n    const a_position = gl.getAttribLocation(program, 'a_position');\n    set3DModel(gl, a_position);\n\n    // 颜色\n    const a_color = gl.getAttribLocation(program, 'a_color');\n    setColor(gl, a_color);\n\n    function degToRad(d: number) {\n        return (d * Math.PI) / 180;\n    }\n\n    // Draw the scene.\n    const options = {\n        translation: [200, 200, 0],\n        rotation: [degToRad(40), degToRad(30), degToRad(5)],\n        scale: [1, 1, 1],\n    } as {\n        translation: [number, number, number];\n        rotation: [number, number, number];\n        scale: [number, number, number];\n    };\n    const u_matrix = gl.getUniformLocation(program, 'u_matrix');\n\n    let then = 0,\n        rafId = 0;\n    const draw = function draw(now: number) {\n        now *= 0.001;\n        const deltaTime = now - then;\n        then = now;\n\n        options.rotation[1] += 1.2 * deltaTime;\n\n        drawMatrix(gl, u_matrix, options);\n\n        rafId = requestAnimationFrame(draw);\n    };\n\n    draw(0);\n\n    // TODO :clear for useEffect\n    return () => cancelAnimationFrame(rafId);\n}\n\n/**\n * 绘制\n *\n * @param {WebGLRenderingContext} gl\n * @return {*}\n */\nfunction drawMatrix(\n    gl: WebGLRenderingContext,\n    u_matrix: WebGLUniformLocation | null,\n    options: {\n        translation: [number, number, number];\n        rotation: [number, number, number];\n        scale: [number, number, number];\n    } = {\n        translation: [0, 0, 0],\n        rotation: [0, 0, 0],\n        scale: [1, 1, 1],\n    },\n) {\n    const { translation, rotation, scale } = options;\n    // 矩阵\n\n    const translationMatrix = m4.translation(translation[0], translation[1], translation[2]);\n    const rotationXMatrix = m4.rotationX(rotation[0]);\n    const rotationYMatrix = m4.rotationY(rotation[1]);\n    const rotationZMatrix = m4.rotationZ(rotation[2]);\n    const scaleMatrix = m4.scaling(scale[0], scale[1], scale[2]);\n    // 根据分辨率生成矩阵\n    const projectionMatrix = m4.projection(gl.canvas.width, gl.canvas.height, 400);\n\n    let matrix = m4.identity(); // 初始矩阵\n    matrix = m4.multiply(projectionMatrix, translationMatrix);\n    matrix = m4.multiply(matrix, rotationXMatrix);\n    matrix = m4.multiply(matrix, rotationYMatrix);\n    matrix = m4.multiply(matrix, rotationZMatrix);\n    matrix = m4.multiply(matrix, scaleMatrix);\n    // F 的中心\n    matrix = m4.multiply(matrix, m4.translation(-50, -75, -15));\n\n    gl.uniformMatrix4fv(u_matrix, false, matrix);\n\n    // 绘制\n    gl.drawArrays(gl.TRIANGLES, 0, 16 * 6);\n}\n\nfunction set3DModel(gl: WebGLRenderingContext, a_position: number) {\n    /* prettier-ignore */\n    // 16 个矩形\n    const points = [\n        // left column front\n        0,   0,  0,\n        0, 150,  0,\n        30,   0,  0,\n        0, 150,  0,\n        30, 150,  0,\n        30,   0,  0,\n\n        // top rung front\n        30,   0,  0,\n        30,  30,  0,\n        100,   0,  0,\n        30,  30,  0,\n        100,  30,  0,\n        100,   0,  0,\n\n        // middle rung front\n        30,  60,  0,\n        30,  90,  0,\n        67,  60,  0,\n        30,  90,  0,\n        67,  90,  0,\n        67,  60,  0,\n\n        // left column back\n        0,   0,  30,\n        30,   0,  30,\n        0, 150,  30,\n        0, 150,  30,\n        30,   0,  30,\n        30, 150,  30,\n\n        // top rung back\n        30,   0,  30,\n        100,   0,  30,\n        30,  30,  30,\n        30,  30,  30,\n        100,   0,  30,\n        100,  30,  30,\n\n        // middle rung back\n        30,  60,  30,\n        67,  60,  30,\n        30,  90,  30,\n        30,  90,  30,\n        67,  60,  30,\n        67,  90,  30,\n\n        // top\n        0,   0,   0,\n        100,   0,   0,\n        100,   0,  30,\n        0,   0,   0,\n        100,   0,  30,\n        0,   0,  30,\n\n        // top rung right\n        100,   0,   0,\n        100,  30,   0,\n        100,  30,  30,\n        100,   0,   0,\n        100,  30,  30,\n        100,   0,  30,\n\n        // under top rung\n        30,   30,   0,\n        30,   30,  30,\n        100,  30,  30,\n        30,   30,   0,\n        100,  30,  30,\n        100,  30,   0,\n\n        // between top rung and middle\n        30,   30,   0,\n        30,   60,  30,\n        30,   30,  30,\n        30,   30,   0,\n        30,   60,   0,\n        30,   60,  30,\n\n        // top of middle rung\n        30,   60,   0,\n        67,   60,  30,\n        30,   60,  30,\n        30,   60,   0,\n        67,   60,   0,\n        67,   60,  30,\n\n        // right of middle rung\n        67,   60,   0,\n        67,   90,  30,\n        67,   60,  30,\n        67,   60,   0,\n        67,   90,   0,\n        67,   90,  30,\n\n        // bottom of middle rung.\n        30,   90,   0,\n        30,   90,  30,\n        67,   90,  30,\n        30,   90,   0,\n        67,   90,  30,\n        67,   90,   0,\n\n        // right of bottom\n        30,   90,   0,\n        30,  150,  30,\n        30,   90,  30,\n        30,   90,   0,\n        30,  150,   0,\n        30,  150,  30,\n\n        // bottom\n        0,   150,   0,\n        0,   150,  30,\n        30,  150,  30,\n        0,   150,   0,\n        30,  150,  30,\n        30,  150,   0,\n\n        // left side\n        0,   0,   0,\n        0,   0,  30,\n        0, 150,  30,\n        0,   0,   0,\n        0, 150,  30,\n        0, 150,   0\n    ];\n\n    // 缓冲\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n\n    gl.enableVertexAttribArray(a_position);\n    gl.vertexAttribPointer(a_position, 3, gl.FLOAT, false, 0, 0);\n}\n\nfunction setColor(gl: WebGLRenderingContext, a_color: number) {\n    /* prettier-ignore */\n    // 颜色\n    const colors = [\n        // left column front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // top rung front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // middle rung front\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n        200,  70, 120,\n\n        // left column back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // top rung back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // middle rung back\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n        80, 70, 200,\n\n        // top\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n        70, 200, 210,\n\n        // top rung right\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n        200, 200, 70,\n\n        // under top rung\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n        210, 100, 70,\n\n        // between top rung and middle\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n        210, 160, 70,\n\n        // top of middle rung\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n        70, 180, 210,\n\n        // right of middle rung\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n        100, 70, 210,\n\n        // bottom of middle rung.\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n        76, 210, 100,\n\n        // right of bottom\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n        140, 210, 80,\n\n        // bottom\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n        90, 130, 110,\n\n        // left side\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220,\n        160, 160, 220\n    ];\n\n    // 颜色缓冲\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(colors), gl.STATIC_DRAW);\n\n    gl.vertexAttribPointer(a_color, 3, gl.UNSIGNED_BYTE, true, 0, 0);\n    gl.enableVertexAttribArray(a_color);\n}\n","import React, { useState } from 'react';\n\nimport { Switch, Route, useRouteMatch, useHistory, useLocation } from 'react-router-dom';\n\nimport { NavBar, Icon, Drawer, List } from 'antd-mobile';\nimport styles from './styles.module.less';\n\nimport HelloWorld from './HelloWorld';\nimport Point from './Point';\nimport Line from './Line';\nimport Triangle from './Triangle';\nimport Texture from './Texture';\nimport Coordinate from './Coordinate';\nimport Matrix from './Matrix';\nimport Cube from './Cube';\nimport Animation from \"./Animation\";\n\nconst ROUTES = [\n    {\n        name: 'All',\n        route: '/demo',\n        component: null,\n    },\n    {\n        name: 'hello-world',\n        route: '/demo/hello-world',\n        component: <HelloWorld />,\n    },\n    {\n        name: 'Point',\n        route: '/demo/point',\n        component: <Point />,\n    },\n    {\n        name: 'Line',\n        route: '/demo/line',\n        component: <Line />,\n    },\n    {\n        name: 'Triangle',\n        route: '/demo/triangle',\n        component: <Triangle />,\n    },\n    {\n        name: 'Texture',\n        route: '/demo/texture',\n        component: <Texture />,\n    },\n    {\n        name: 'Coordinate',\n        route: '/demo/coordinate',\n        component: <Coordinate />,\n    },\n    {\n        name: 'Matrix',\n        route: '/demo/matrix',\n        component: <Matrix />,\n    },\n    {\n        name: 'Cube',\n        route: '/demo/cube',\n        component: <Cube />,\n    },\n    {\n        name: 'Animation',\n        route: '/demo/animation',\n        component: <Animation />,\n    },\n];\n\nexport default function Demo() {\n    const { path } = useRouteMatch();\n    const { pathname } = useLocation();\n    const history = useHistory();\n\n    const [state, setState] = useState({\n        open: false,\n    });\n\n    const findRoute = ROUTES.find(({ route }) => route === pathname);\n\n    const topTitle = findRoute ? findRoute.name : 'Demo';\n\n    const onOpenChange = () => {\n        setState({ ...state, open: !state.open });\n    };\n\n    const onRoute = (route: string) => {\n        setState({ ...state, open: false });\n        pathname !== route && history.push(route);\n    };\n\n    const onReload = () => {\n        window.location.reload();\n    };\n\n    const sidebar = (\n        <List>\n            {ROUTES.map(({ route, name }, index) => {\n                return (\n                    <List.Item\n                        className={pathname === route ? 'active' : ''}\n                        key={index}\n                        multipleLine\n                        onClick={() => onRoute(route)}\n                    >\n                        {name}\n                    </List.Item>\n                );\n            })}\n        </List>\n    );\n\n    return (\n        <>\n            <NavBar\n                className={styles.navBar}\n                mode=\"dark\"\n                icon={<Icon type=\"ellipsis\" />}\n                onLeftClick={onOpenChange}\n                rightContent={<Icon onClick={() => onReload()} type=\"check-circle\" />}\n            >\n                {topTitle}\n            </NavBar>\n            <Drawer\n                className={styles.drawer}\n                style={{ minHeight: document.documentElement.clientHeight }}\n                enableDragHandle={false}\n                sidebar={sidebar}\n                open={state.open}\n                onOpenChange={onOpenChange}\n            >\n                <Switch>\n                    <Route path={`${path}`} exact>\n                        This is the demo home page.\n                        {/* {ROUTES.map(({ route, component }) => (\n                            <React.Fragment key={route}>{component}</React.Fragment>\n                        ))} */}\n                    </Route>\n\n                    {ROUTES.map(\n                        ({ route, component }) =>\n                            component && (\n                                <Route key={route} path={route}>\n                                    {component}\n                                </Route>\n                            ),\n                    )}\n\n                    <Route path={`${path}/*`}>\n                        <>404</>\n                    </Route>\n                </Switch>\n            </Drawer>\n        </>\n    );\n}\n","import React, { useRef } from 'react';\n\nimport { useLine, useGrid } from '@/services/hooks/draw';\n\nconst WIDTH = window.innerWidth,\n    HEIGHT = window.innerHeight;\n\nexport default function Draw() {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useGrid(canvasRef);\n\n    useLine(canvasRef, { strokeStyle: 'green', lineJoin: 'round', lineWidth: 5 });\n\n    return (\n        <>\n            <canvas ref={canvasRef} width={WIDTH} height={HEIGHT} />\n        </>\n    );\n}\n","import React, { useState, useEffect, useCallback } from 'react';\n\n/**\n * 绘制线条\n *\n * @param {React.RefObject<HTMLCanvasElement>} canvasRef - canvas 引用\n * @param {({\n *         strokeStyle: string | CanvasGradient | CanvasPattern;\n *         lineJoin: CanvasLineJoin;\n *         lineWidth: number;\n *     })} [options={\n *         strokeStyle: 'red',\n *         lineJoin: 'round',\n *         lineWidth: 5,\n *     }] - 配置选项\n */\nexport function useLine(\n    canvasRef: React.RefObject<HTMLCanvasElement>,\n    options: {\n        strokeStyle: string | CanvasGradient | CanvasPattern;\n        lineJoin: CanvasLineJoin;\n        lineWidth: number;\n    } = {\n        strokeStyle: 'red',\n        lineJoin: 'round',\n        lineWidth: 5,\n    },\n) {\n    // 坐标点类型\n    type Coordinate = {\n        x: number;\n        y: number;\n    };\n\n    const [isPainting, setIsPainting] = useState(false);\n    const [mousePosition, setMousePosition] = useState<Coordinate>();\n\n    const getCoordinates = useCallback(\n        (event: MouseEvent | TouchEvent) => {\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n\n            const { clientX, clientY } = (event as TouchEvent).changedTouches\n                ? (event as TouchEvent).changedTouches[0] // use first touch\n                : (event as MouseEvent);\n            // const { clientX, clientY } = event as MouseEvent;\n            const { offsetLeft, offsetTop } = canvas;\n\n            return { x: clientX - offsetLeft, y: clientY - offsetTop };\n        },\n        [canvasRef],\n    );\n\n    const drawLine = useCallback(\n        (from: Coordinate, to: Coordinate) => {\n            const canvas = canvasRef.current;\n            const ctx = canvas?.getContext('2d');\n            if (!ctx) return;\n\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.lineJoin = options.lineJoin;\n            ctx.lineWidth = options.lineWidth;\n\n            ctx.beginPath();\n            ctx.moveTo(from.x, from.y);\n            ctx.lineTo(to.x, to.y);\n            ctx.closePath();\n\n            ctx.stroke();\n        },\n        [canvasRef, options],\n    );\n\n    const handleStart = useCallback(\n        (event: MouseEvent | TouchEvent) => {\n            event.preventDefault();\n            setIsPainting(true);\n            const coordinates = getCoordinates(event);\n            if (!coordinates) return;\n            setMousePosition(coordinates);\n        },\n        [getCoordinates],\n    );\n\n    const handleMove = useCallback(\n        (event: MouseEvent | TouchEvent) => {\n            event.preventDefault();\n            if (!isPainting || !mousePosition) return;\n\n            const newCoordinates = getCoordinates(event);\n            if (!newCoordinates) return;\n            // Drawing\n            drawLine(mousePosition, newCoordinates);\n            setMousePosition(newCoordinates);\n        },\n        [drawLine, getCoordinates, isPainting, mousePosition],\n    );\n    const handleEnd = useCallback((event: MouseEvent | TouchEvent) => {\n        event.preventDefault();\n        setIsPainting(false);\n        setMousePosition(undefined);\n    }, []);\n\n    useEffect(() => {\n        const el = canvasRef.current;\n        if (!el) return;\n\n        el.addEventListener('mousedown', handleStart);\n        el.addEventListener('mousemove', handleMove);\n        el.addEventListener('mouseup', handleEnd);\n        el.addEventListener('mouseleave', handleEnd);\n        // add touch events\n        el.addEventListener('touchstart', handleStart);\n        el.addEventListener('touchmove', handleMove);\n        el.addEventListener('touchend', handleEnd);\n        el.addEventListener('touchcancel', handleEnd);\n\n        return () => {\n            el.removeEventListener('mousedown', handleStart);\n            el.removeEventListener('mousemove', handleMove);\n            el.removeEventListener('mouseup', handleEnd);\n            el.removeEventListener('mouseleave', handleEnd);\n            // remove touch events\n            el.removeEventListener('touchstart', handleStart);\n            el.removeEventListener('touchmove', handleMove);\n            el.removeEventListener('touchend', handleEnd);\n            el.removeEventListener('touchcancel', handleEnd);\n        };\n    }, [canvasRef, handleEnd, handleStart, handleMove]);\n}\n\n/**\n * 绘制网格辅助性\n *\n * @param {React.RefObject<HTMLCanvasElement>} canvasRef - canvas 引用\n * @param {string} [options={\n *         strokeStyle: '#dedcdc',\n *         lineWidth: 0.5,\n *         gridSize: 50,\n *     }] - 配置选项\n */\nexport function useGrid(\n    canvasRef: React.RefObject<HTMLCanvasElement>,\n    options = {\n        strokeStyle: '#dedcdc',\n        lineWidth: 0.5,\n        gridSize: 50,\n    },\n) {\n    const drawGrid = useCallback((ctx: CanvasRenderingContext2D) => {\n        const { width, height } = ctx.canvas;\n        ctx.clearRect(0, 0, width, height);\n        ctx.beginPath();\n        ctx.setLineDash([5, 1]);\n        ctx.setLineDash([]);\n\n        const { strokeStyle, lineWidth, gridSize } = options;\n\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n\n        // 水平方向\n        let countX = 0;\n        while (countX < width) {\n            countX += gridSize;\n            ctx.moveTo(countX, 0);\n            ctx.lineTo(countX, height);\n        }\n        ctx.stroke();\n        // 垂直方向\n        let countY = 0;\n        while (countY < height) {\n            countY += gridSize;\n            ctx.moveTo(0, countY);\n            ctx.lineTo(width, countY);\n        }\n        ctx.stroke();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas?.getContext('2d');\n        if (!ctx) return;\n        drawGrid(ctx);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [canvasRef]);\n}\n","import React from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\n\nimport Home from '@/containers/Home';\nimport Demo from '@/containers/Demo';\nimport Draw from '@/containers/Draw';\n\nfunction App() {\n    return (\n        <>\n            <HashRouter>\n                <Route path=\"/\" exact>\n                    <Home />\n                </Route>\n                <Route path=\"/demo\">\n                    <Demo />\n                </Route>\n                <Route path=\"/draw\">\n                    <Draw />\n                </Route>\n            </HashRouter>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport './styles.module.less';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <>\n        {/* <React.StrictMode> */}\n        <App />\n        {/* </React.StrictMode> */}\n    </>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"navBar--2z0l6\",\"drawer\":\"drawer--qtfza\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"canvas--3wt0o\"};"],"sourceRoot":""}